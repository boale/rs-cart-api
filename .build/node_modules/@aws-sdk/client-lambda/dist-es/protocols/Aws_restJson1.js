import { HttpRequest as __HttpRequest } from "@aws-sdk/protocol-http";
import { decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, limitedParseDouble as __limitedParseDouble, map as __map, parseEpochTimestamp as __parseEpochTimestamp, resolvedPath as __resolvedPath, serializeFloat as __serializeFloat, throwDefaultError, } from "@aws-sdk/smithy-client";
import { LambdaServiceException as __BaseException } from "../models/LambdaServiceException";
import { CodeSigningConfigNotFoundException, CodeStorageExceededException, CodeVerificationFailedException, EC2AccessDeniedException, EC2ThrottledException, EC2UnexpectedException, EFSIOException, EFSMountConnectivityException, EFSMountFailureException, EFSMountTimeoutException, ENILimitReachedException, InvalidCodeSignatureException, InvalidParameterValueException, InvalidRequestContentException, InvalidRuntimeException, InvalidSecurityGroupIDException, InvalidSubnetIDException, InvalidZipFileException, KMSAccessDeniedException, KMSDisabledException, KMSInvalidStateException, KMSNotFoundException, PolicyLengthExceededException, PreconditionFailedException, ProvisionedConcurrencyConfigNotFoundException, RequestTooLargeException, ResourceConflictException, ResourceInUseException, ResourceNotFoundException, ResourceNotReadyException, ServiceException, SnapStartException, SnapStartNotReadyException, SnapStartTimeoutException, SubnetIPAddressLimitReachedException, TooManyRequestsException, UnsupportedMediaTypeException, } from "../models/models_0";
export const se_AddLayerVersionPermissionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy";
    resolvedPath = __resolvedPath(resolvedPath, input, "LayerName", () => input.LayerName, "{LayerName}", false);
    resolvedPath = __resolvedPath(resolvedPath, input, "VersionNumber", () => input.VersionNumber.toString(), "{VersionNumber}", false);
    const query = map({
        RevisionId: [, input.RevisionId],
    });
    let body;
    body = JSON.stringify({
        ...(input.Action != null && { Action: input.Action }),
        ...(input.OrganizationId != null && { OrganizationId: input.OrganizationId }),
        ...(input.Principal != null && { Principal: input.Principal }),
        ...(input.StatementId != null && { StatementId: input.StatementId }),
    });
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
export const se_AddPermissionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2015-03-31/functions/{FunctionName}/policy";
    resolvedPath = __resolvedPath(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Qualifier: [, input.Qualifier],
    });
    let body;
    body = JSON.stringify({
        ...(input.Action != null && { Action: input.Action }),
        ...(input.EventSourceToken != null && { EventSourceToken: input.EventSourceToken }),
        ...(input.FunctionUrlAuthType != null && { FunctionUrlAuthType: input.FunctionUrlAuthType }),
        ...(input.Principal != null && { Principal: input.Principal }),
        ...(input.PrincipalOrgID != null && { PrincipalOrgID: input.PrincipalOrgID }),
        ...(input.RevisionId != null && { RevisionId: input.RevisionId }),
        ...(input.SourceAccount != null && { SourceAccount: input.SourceAccount }),
        ...(input.SourceArn != null && { SourceArn: input.SourceArn }),
        ...(input.StatementId != null && { StatementId: input.StatementId }),
    });
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
export const se_CreateAliasCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2015-03-31/functions/{FunctionName}/aliases";
    resolvedPath = __resolvedPath(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    let body;
    body = JSON.stringify({
        ...(input.Description != null && { Description: input.Description }),
        ...(input.FunctionVersion != null && { FunctionVersion: input.FunctionVersion }),
        ...(input.Name != null && { Name: input.Name }),
        ...(input.RoutingConfig != null && { RoutingConfig: se_AliasRoutingConfiguration(input.RoutingConfig, context) }),
    });
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
export const se_CreateCodeSigningConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2020-04-22/code-signing-configs";
    let body;
    body = JSON.stringify({
        ...(input.AllowedPublishers != null && {
            AllowedPublishers: se_AllowedPublishers(input.AllowedPublishers, context),
        }),
        ...(input.CodeSigningPolicies != null && {
            CodeSigningPolicies: se_CodeSigningPolicies(input.CodeSigningPolicies, context),
        }),
        ...(input.Description != null && { Description: input.Description }),
    });
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
export const se_CreateEventSourceMappingCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2015-03-31/event-source-mappings";
    let body;
    body = JSON.stringify({
        ...(input.AmazonManagedKafkaEventSourceConfig != null && {
            AmazonManagedKafkaEventSourceConfig: se_AmazonManagedKafkaEventSourceConfig(input.AmazonManagedKafkaEventSourceConfig, context),
        }),
        ...(input.BatchSize != null && { BatchSize: input.BatchSize }),
        ...(input.BisectBatchOnFunctionError != null && { BisectBatchOnFunctionError: input.BisectBatchOnFunctionError }),
        ...(input.DestinationConfig != null && {
            DestinationConfig: se_DestinationConfig(input.DestinationConfig, context),
        }),
        ...(input.DocumentDBEventSourceConfig != null && {
            DocumentDBEventSourceConfig: se_DocumentDBEventSourceConfig(input.DocumentDBEventSourceConfig, context),
        }),
        ...(input.Enabled != null && { Enabled: input.Enabled }),
        ...(input.EventSourceArn != null && { EventSourceArn: input.EventSourceArn }),
        ...(input.FilterCriteria != null && { FilterCriteria: se_FilterCriteria(input.FilterCriteria, context) }),
        ...(input.FunctionName != null && { FunctionName: input.FunctionName }),
        ...(input.FunctionResponseTypes != null && {
            FunctionResponseTypes: se_FunctionResponseTypeList(input.FunctionResponseTypes, context),
        }),
        ...(input.MaximumBatchingWindowInSeconds != null && {
            MaximumBatchingWindowInSeconds: input.MaximumBatchingWindowInSeconds,
        }),
        ...(input.MaximumRecordAgeInSeconds != null && { MaximumRecordAgeInSeconds: input.MaximumRecordAgeInSeconds }),
        ...(input.MaximumRetryAttempts != null && { MaximumRetryAttempts: input.MaximumRetryAttempts }),
        ...(input.ParallelizationFactor != null && { ParallelizationFactor: input.ParallelizationFactor }),
        ...(input.Queues != null && { Queues: se_Queues(input.Queues, context) }),
        ...(input.ScalingConfig != null && { ScalingConfig: se_ScalingConfig(input.ScalingConfig, context) }),
        ...(input.SelfManagedEventSource != null && {
            SelfManagedEventSource: se_SelfManagedEventSource(input.SelfManagedEventSource, context),
        }),
        ...(input.SelfManagedKafkaEventSourceConfig != null && {
            SelfManagedKafkaEventSourceConfig: se_SelfManagedKafkaEventSourceConfig(input.SelfManagedKafkaEventSourceConfig, context),
        }),
        ...(input.SourceAccessConfigurations != null && {
            SourceAccessConfigurations: se_SourceAccessConfigurations(input.SourceAccessConfigurations, context),
        }),
        ...(input.StartingPosition != null && { StartingPosition: input.StartingPosition }),
        ...(input.StartingPositionTimestamp != null && {
            StartingPositionTimestamp: Math.round(input.StartingPositionTimestamp.getTime() / 1000),
        }),
        ...(input.Topics != null && { Topics: se_Topics(input.Topics, context) }),
        ...(input.TumblingWindowInSeconds != null && { TumblingWindowInSeconds: input.TumblingWindowInSeconds }),
    });
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
export const se_CreateFunctionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2015-03-31/functions";
    let body;
    body = JSON.stringify({
        ...(input.Architectures != null && { Architectures: se_ArchitecturesList(input.Architectures, context) }),
        ...(input.Code != null && { Code: se_FunctionCode(input.Code, context) }),
        ...(input.CodeSigningConfigArn != null && { CodeSigningConfigArn: input.CodeSigningConfigArn }),
        ...(input.DeadLetterConfig != null && { DeadLetterConfig: se_DeadLetterConfig(input.DeadLetterConfig, context) }),
        ...(input.Description != null && { Description: input.Description }),
        ...(input.Environment != null && { Environment: se_Environment(input.Environment, context) }),
        ...(input.EphemeralStorage != null && { EphemeralStorage: se_EphemeralStorage(input.EphemeralStorage, context) }),
        ...(input.FileSystemConfigs != null && {
            FileSystemConfigs: se_FileSystemConfigList(input.FileSystemConfigs, context),
        }),
        ...(input.FunctionName != null && { FunctionName: input.FunctionName }),
        ...(input.Handler != null && { Handler: input.Handler }),
        ...(input.ImageConfig != null && { ImageConfig: se_ImageConfig(input.ImageConfig, context) }),
        ...(input.KMSKeyArn != null && { KMSKeyArn: input.KMSKeyArn }),
        ...(input.Layers != null && { Layers: se_LayerList(input.Layers, context) }),
        ...(input.MemorySize != null && { MemorySize: input.MemorySize }),
        ...(input.PackageType != null && { PackageType: input.PackageType }),
        ...(input.Publish != null && { Publish: input.Publish }),
        ...(input.Role != null && { Role: input.Role }),
        ...(input.Runtime != null && { Runtime: input.Runtime }),
        ...(input.SnapStart != null && { SnapStart: se_SnapStart(input.SnapStart, context) }),
        ...(input.Tags != null && { Tags: se_Tags(input.Tags, context) }),
        ...(input.Timeout != null && { Timeout: input.Timeout }),
        ...(input.TracingConfig != null && { TracingConfig: se_TracingConfig(input.TracingConfig, context) }),
        ...(input.VpcConfig != null && { VpcConfig: se_VpcConfig(input.VpcConfig, context) }),
    });
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
export const se_CreateFunctionUrlConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2021-10-31/functions/{FunctionName}/url";
    resolvedPath = __resolvedPath(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Qualifier: [, input.Qualifier],
    });
    let body;
    body = JSON.stringify({
        ...(input.AuthType != null && { AuthType: input.AuthType }),
        ...(input.Cors != null && { Cors: se_Cors(input.Cors, context) }),
        ...(input.InvokeMode != null && { InvokeMode: input.InvokeMode }),
    });
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
export const se_DeleteAliasCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2015-03-31/functions/{FunctionName}/aliases/{Name}";
    resolvedPath = __resolvedPath(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    resolvedPath = __resolvedPath(resolvedPath, input, "Name", () => input.Name, "{Name}", false);
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
export const se_DeleteCodeSigningConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2020-04-22/code-signing-configs/{CodeSigningConfigArn}";
    resolvedPath = __resolvedPath(resolvedPath, input, "CodeSigningConfigArn", () => input.CodeSigningConfigArn, "{CodeSigningConfigArn}", false);
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
export const se_DeleteEventSourceMappingCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2015-03-31/event-source-mappings/{UUID}";
    resolvedPath = __resolvedPath(resolvedPath, input, "UUID", () => input.UUID, "{UUID}", false);
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
export const se_DeleteFunctionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2015-03-31/functions/{FunctionName}";
    resolvedPath = __resolvedPath(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Qualifier: [, input.Qualifier],
    });
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
export const se_DeleteFunctionCodeSigningConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2020-06-30/functions/{FunctionName}/code-signing-config";
    resolvedPath = __resolvedPath(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
export const se_DeleteFunctionConcurrencyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2017-10-31/functions/{FunctionName}/concurrency";
    resolvedPath = __resolvedPath(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
export const se_DeleteFunctionEventInvokeConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2019-09-25/functions/{FunctionName}/event-invoke-config";
    resolvedPath = __resolvedPath(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Qualifier: [, input.Qualifier],
    });
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
export const se_DeleteFunctionUrlConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2021-10-31/functions/{FunctionName}/url";
    resolvedPath = __resolvedPath(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Qualifier: [, input.Qualifier],
    });
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
export const se_DeleteLayerVersionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2018-10-31/layers/{LayerName}/versions/{VersionNumber}";
    resolvedPath = __resolvedPath(resolvedPath, input, "LayerName", () => input.LayerName, "{LayerName}", false);
    resolvedPath = __resolvedPath(resolvedPath, input, "VersionNumber", () => input.VersionNumber.toString(), "{VersionNumber}", false);
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
export const se_DeleteProvisionedConcurrencyConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2019-09-30/functions/{FunctionName}/provisioned-concurrency";
    resolvedPath = __resolvedPath(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Qualifier: [, __expectNonNull(input.Qualifier, `Qualifier`)],
    });
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
export const se_GetAccountSettingsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2016-08-19/account-settings";
    let body;
    body = "";
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
export const se_GetAliasCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2015-03-31/functions/{FunctionName}/aliases/{Name}";
    resolvedPath = __resolvedPath(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    resolvedPath = __resolvedPath(resolvedPath, input, "Name", () => input.Name, "{Name}", false);
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
export const se_GetCodeSigningConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2020-04-22/code-signing-configs/{CodeSigningConfigArn}";
    resolvedPath = __resolvedPath(resolvedPath, input, "CodeSigningConfigArn", () => input.CodeSigningConfigArn, "{CodeSigningConfigArn}", false);
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
export const se_GetEventSourceMappingCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2015-03-31/event-source-mappings/{UUID}";
    resolvedPath = __resolvedPath(resolvedPath, input, "UUID", () => input.UUID, "{UUID}", false);
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
export const se_GetFunctionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2015-03-31/functions/{FunctionName}";
    resolvedPath = __resolvedPath(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Qualifier: [, input.Qualifier],
    });
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
export const se_GetFunctionCodeSigningConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2020-06-30/functions/{FunctionName}/code-signing-config";
    resolvedPath = __resolvedPath(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
export const se_GetFunctionConcurrencyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2019-09-30/functions/{FunctionName}/concurrency";
    resolvedPath = __resolvedPath(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
export const se_GetFunctionConfigurationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2015-03-31/functions/{FunctionName}/configuration";
    resolvedPath = __resolvedPath(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Qualifier: [, input.Qualifier],
    });
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
export const se_GetFunctionEventInvokeConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2019-09-25/functions/{FunctionName}/event-invoke-config";
    resolvedPath = __resolvedPath(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Qualifier: [, input.Qualifier],
    });
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
export const se_GetFunctionUrlConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2021-10-31/functions/{FunctionName}/url";
    resolvedPath = __resolvedPath(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Qualifier: [, input.Qualifier],
    });
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
export const se_GetLayerVersionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2018-10-31/layers/{LayerName}/versions/{VersionNumber}";
    resolvedPath = __resolvedPath(resolvedPath, input, "LayerName", () => input.LayerName, "{LayerName}", false);
    resolvedPath = __resolvedPath(resolvedPath, input, "VersionNumber", () => input.VersionNumber.toString(), "{VersionNumber}", false);
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
export const se_GetLayerVersionByArnCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2018-10-31/layers";
    const query = map({
        find: [, "LayerVersion"],
        Arn: [, __expectNonNull(input.Arn, `Arn`)],
    });
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
export const se_GetLayerVersionPolicyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy";
    resolvedPath = __resolvedPath(resolvedPath, input, "LayerName", () => input.LayerName, "{LayerName}", false);
    resolvedPath = __resolvedPath(resolvedPath, input, "VersionNumber", () => input.VersionNumber.toString(), "{VersionNumber}", false);
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
export const se_GetPolicyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2015-03-31/functions/{FunctionName}/policy";
    resolvedPath = __resolvedPath(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Qualifier: [, input.Qualifier],
    });
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
export const se_GetProvisionedConcurrencyConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2019-09-30/functions/{FunctionName}/provisioned-concurrency";
    resolvedPath = __resolvedPath(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Qualifier: [, __expectNonNull(input.Qualifier, `Qualifier`)],
    });
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
export const se_GetRuntimeManagementConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2021-07-20/functions/{FunctionName}/runtime-management-config";
    resolvedPath = __resolvedPath(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Qualifier: [, input.Qualifier],
    });
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
export const se_InvokeCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/octet-stream",
        "x-amz-invocation-type": input.InvocationType,
        "x-amz-log-type": input.LogType,
        "x-amz-client-context": input.ClientContext,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2015-03-31/functions/{FunctionName}/invocations";
    resolvedPath = __resolvedPath(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Qualifier: [, input.Qualifier],
    });
    let body;
    if (input.Payload !== undefined) {
        body = input.Payload;
    }
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
export const se_InvokeAsyncCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/octet-stream",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2014-11-13/functions/{FunctionName}/invoke-async";
    resolvedPath = __resolvedPath(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    let body;
    if (input.InvokeArgs !== undefined) {
        body = input.InvokeArgs;
    }
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
export const se_InvokeWithResponseStreamCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/octet-stream",
        "x-amz-invocation-type": input.InvocationType,
        "x-amz-log-type": input.LogType,
        "x-amz-client-context": input.ClientContext,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2021-11-15/functions/{FunctionName}/response-streaming-invocations";
    resolvedPath = __resolvedPath(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Qualifier: [, input.Qualifier],
    });
    let body;
    if (input.Payload !== undefined) {
        body = input.Payload;
    }
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
export const se_ListAliasesCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2015-03-31/functions/{FunctionName}/aliases";
    resolvedPath = __resolvedPath(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        FunctionVersion: [, input.FunctionVersion],
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
    });
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
export const se_ListCodeSigningConfigsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2020-04-22/code-signing-configs";
    const query = map({
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
    });
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
export const se_ListEventSourceMappingsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2015-03-31/event-source-mappings";
    const query = map({
        EventSourceArn: [, input.EventSourceArn],
        FunctionName: [, input.FunctionName],
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
    });
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
export const se_ListFunctionEventInvokeConfigsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2019-09-25/functions/{FunctionName}/event-invoke-config/list";
    resolvedPath = __resolvedPath(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
    });
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
export const se_ListFunctionsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2015-03-31/functions";
    const query = map({
        MasterRegion: [, input.MasterRegion],
        FunctionVersion: [, input.FunctionVersion],
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
    });
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
export const se_ListFunctionsByCodeSigningConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2020-04-22/code-signing-configs/{CodeSigningConfigArn}/functions";
    resolvedPath = __resolvedPath(resolvedPath, input, "CodeSigningConfigArn", () => input.CodeSigningConfigArn, "{CodeSigningConfigArn}", false);
    const query = map({
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
    });
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
export const se_ListFunctionUrlConfigsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2021-10-31/functions/{FunctionName}/urls";
    resolvedPath = __resolvedPath(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
    });
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
export const se_ListLayersCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2018-10-31/layers";
    const query = map({
        CompatibleRuntime: [, input.CompatibleRuntime],
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
        CompatibleArchitecture: [, input.CompatibleArchitecture],
    });
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
export const se_ListLayerVersionsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2018-10-31/layers/{LayerName}/versions";
    resolvedPath = __resolvedPath(resolvedPath, input, "LayerName", () => input.LayerName, "{LayerName}", false);
    const query = map({
        CompatibleRuntime: [, input.CompatibleRuntime],
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
        CompatibleArchitecture: [, input.CompatibleArchitecture],
    });
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
export const se_ListProvisionedConcurrencyConfigsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2019-09-30/functions/{FunctionName}/provisioned-concurrency";
    resolvedPath = __resolvedPath(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        List: [, "ALL"],
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
    });
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
export const se_ListTagsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2017-03-31/tags/{Resource}";
    resolvedPath = __resolvedPath(resolvedPath, input, "Resource", () => input.Resource, "{Resource}", false);
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
export const se_ListVersionsByFunctionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2015-03-31/functions/{FunctionName}/versions";
    resolvedPath = __resolvedPath(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
    });
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
export const se_PublishLayerVersionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2018-10-31/layers/{LayerName}/versions";
    resolvedPath = __resolvedPath(resolvedPath, input, "LayerName", () => input.LayerName, "{LayerName}", false);
    let body;
    body = JSON.stringify({
        ...(input.CompatibleArchitectures != null && {
            CompatibleArchitectures: se_CompatibleArchitectures(input.CompatibleArchitectures, context),
        }),
        ...(input.CompatibleRuntimes != null && {
            CompatibleRuntimes: se_CompatibleRuntimes(input.CompatibleRuntimes, context),
        }),
        ...(input.Content != null && { Content: se_LayerVersionContentInput(input.Content, context) }),
        ...(input.Description != null && { Description: input.Description }),
        ...(input.LicenseInfo != null && { LicenseInfo: input.LicenseInfo }),
    });
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
export const se_PublishVersionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2015-03-31/functions/{FunctionName}/versions";
    resolvedPath = __resolvedPath(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    let body;
    body = JSON.stringify({
        ...(input.CodeSha256 != null && { CodeSha256: input.CodeSha256 }),
        ...(input.Description != null && { Description: input.Description }),
        ...(input.RevisionId != null && { RevisionId: input.RevisionId }),
    });
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
export const se_PutFunctionCodeSigningConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2020-06-30/functions/{FunctionName}/code-signing-config";
    resolvedPath = __resolvedPath(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    let body;
    body = JSON.stringify({
        ...(input.CodeSigningConfigArn != null && { CodeSigningConfigArn: input.CodeSigningConfigArn }),
    });
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
export const se_PutFunctionConcurrencyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2017-10-31/functions/{FunctionName}/concurrency";
    resolvedPath = __resolvedPath(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    let body;
    body = JSON.stringify({
        ...(input.ReservedConcurrentExecutions != null && {
            ReservedConcurrentExecutions: input.ReservedConcurrentExecutions,
        }),
    });
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
export const se_PutFunctionEventInvokeConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2019-09-25/functions/{FunctionName}/event-invoke-config";
    resolvedPath = __resolvedPath(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Qualifier: [, input.Qualifier],
    });
    let body;
    body = JSON.stringify({
        ...(input.DestinationConfig != null && {
            DestinationConfig: se_DestinationConfig(input.DestinationConfig, context),
        }),
        ...(input.MaximumEventAgeInSeconds != null && { MaximumEventAgeInSeconds: input.MaximumEventAgeInSeconds }),
        ...(input.MaximumRetryAttempts != null && { MaximumRetryAttempts: input.MaximumRetryAttempts }),
    });
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
export const se_PutProvisionedConcurrencyConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2019-09-30/functions/{FunctionName}/provisioned-concurrency";
    resolvedPath = __resolvedPath(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Qualifier: [, __expectNonNull(input.Qualifier, `Qualifier`)],
    });
    let body;
    body = JSON.stringify({
        ...(input.ProvisionedConcurrentExecutions != null && {
            ProvisionedConcurrentExecutions: input.ProvisionedConcurrentExecutions,
        }),
    });
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
export const se_PutRuntimeManagementConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2021-07-20/functions/{FunctionName}/runtime-management-config";
    resolvedPath = __resolvedPath(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Qualifier: [, input.Qualifier],
    });
    let body;
    body = JSON.stringify({
        ...(input.RuntimeVersionArn != null && { RuntimeVersionArn: input.RuntimeVersionArn }),
        ...(input.UpdateRuntimeOn != null && { UpdateRuntimeOn: input.UpdateRuntimeOn }),
    });
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
export const se_RemoveLayerVersionPermissionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy/{StatementId}";
    resolvedPath = __resolvedPath(resolvedPath, input, "LayerName", () => input.LayerName, "{LayerName}", false);
    resolvedPath = __resolvedPath(resolvedPath, input, "VersionNumber", () => input.VersionNumber.toString(), "{VersionNumber}", false);
    resolvedPath = __resolvedPath(resolvedPath, input, "StatementId", () => input.StatementId, "{StatementId}", false);
    const query = map({
        RevisionId: [, input.RevisionId],
    });
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
export const se_RemovePermissionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2015-03-31/functions/{FunctionName}/policy/{StatementId}";
    resolvedPath = __resolvedPath(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    resolvedPath = __resolvedPath(resolvedPath, input, "StatementId", () => input.StatementId, "{StatementId}", false);
    const query = map({
        Qualifier: [, input.Qualifier],
        RevisionId: [, input.RevisionId],
    });
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
export const se_TagResourceCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2017-03-31/tags/{Resource}";
    resolvedPath = __resolvedPath(resolvedPath, input, "Resource", () => input.Resource, "{Resource}", false);
    let body;
    body = JSON.stringify({
        ...(input.Tags != null && { Tags: se_Tags(input.Tags, context) }),
    });
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
export const se_UntagResourceCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2017-03-31/tags/{Resource}";
    resolvedPath = __resolvedPath(resolvedPath, input, "Resource", () => input.Resource, "{Resource}", false);
    const query = map({
        tagKeys: [
            __expectNonNull(input.TagKeys, `TagKeys`) != null,
            () => (input.TagKeys || []).map((_entry) => _entry),
        ],
    });
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
export const se_UpdateAliasCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2015-03-31/functions/{FunctionName}/aliases/{Name}";
    resolvedPath = __resolvedPath(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    resolvedPath = __resolvedPath(resolvedPath, input, "Name", () => input.Name, "{Name}", false);
    let body;
    body = JSON.stringify({
        ...(input.Description != null && { Description: input.Description }),
        ...(input.FunctionVersion != null && { FunctionVersion: input.FunctionVersion }),
        ...(input.RevisionId != null && { RevisionId: input.RevisionId }),
        ...(input.RoutingConfig != null && { RoutingConfig: se_AliasRoutingConfiguration(input.RoutingConfig, context) }),
    });
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
export const se_UpdateCodeSigningConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2020-04-22/code-signing-configs/{CodeSigningConfigArn}";
    resolvedPath = __resolvedPath(resolvedPath, input, "CodeSigningConfigArn", () => input.CodeSigningConfigArn, "{CodeSigningConfigArn}", false);
    let body;
    body = JSON.stringify({
        ...(input.AllowedPublishers != null && {
            AllowedPublishers: se_AllowedPublishers(input.AllowedPublishers, context),
        }),
        ...(input.CodeSigningPolicies != null && {
            CodeSigningPolicies: se_CodeSigningPolicies(input.CodeSigningPolicies, context),
        }),
        ...(input.Description != null && { Description: input.Description }),
    });
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
export const se_UpdateEventSourceMappingCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2015-03-31/event-source-mappings/{UUID}";
    resolvedPath = __resolvedPath(resolvedPath, input, "UUID", () => input.UUID, "{UUID}", false);
    let body;
    body = JSON.stringify({
        ...(input.BatchSize != null && { BatchSize: input.BatchSize }),
        ...(input.BisectBatchOnFunctionError != null && { BisectBatchOnFunctionError: input.BisectBatchOnFunctionError }),
        ...(input.DestinationConfig != null && {
            DestinationConfig: se_DestinationConfig(input.DestinationConfig, context),
        }),
        ...(input.DocumentDBEventSourceConfig != null && {
            DocumentDBEventSourceConfig: se_DocumentDBEventSourceConfig(input.DocumentDBEventSourceConfig, context),
        }),
        ...(input.Enabled != null && { Enabled: input.Enabled }),
        ...(input.FilterCriteria != null && { FilterCriteria: se_FilterCriteria(input.FilterCriteria, context) }),
        ...(input.FunctionName != null && { FunctionName: input.FunctionName }),
        ...(input.FunctionResponseTypes != null && {
            FunctionResponseTypes: se_FunctionResponseTypeList(input.FunctionResponseTypes, context),
        }),
        ...(input.MaximumBatchingWindowInSeconds != null && {
            MaximumBatchingWindowInSeconds: input.MaximumBatchingWindowInSeconds,
        }),
        ...(input.MaximumRecordAgeInSeconds != null && { MaximumRecordAgeInSeconds: input.MaximumRecordAgeInSeconds }),
        ...(input.MaximumRetryAttempts != null && { MaximumRetryAttempts: input.MaximumRetryAttempts }),
        ...(input.ParallelizationFactor != null && { ParallelizationFactor: input.ParallelizationFactor }),
        ...(input.ScalingConfig != null && { ScalingConfig: se_ScalingConfig(input.ScalingConfig, context) }),
        ...(input.SourceAccessConfigurations != null && {
            SourceAccessConfigurations: se_SourceAccessConfigurations(input.SourceAccessConfigurations, context),
        }),
        ...(input.TumblingWindowInSeconds != null && { TumblingWindowInSeconds: input.TumblingWindowInSeconds }),
    });
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
export const se_UpdateFunctionCodeCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2015-03-31/functions/{FunctionName}/code";
    resolvedPath = __resolvedPath(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    let body;
    body = JSON.stringify({
        ...(input.Architectures != null && { Architectures: se_ArchitecturesList(input.Architectures, context) }),
        ...(input.DryRun != null && { DryRun: input.DryRun }),
        ...(input.ImageUri != null && { ImageUri: input.ImageUri }),
        ...(input.Publish != null && { Publish: input.Publish }),
        ...(input.RevisionId != null && { RevisionId: input.RevisionId }),
        ...(input.S3Bucket != null && { S3Bucket: input.S3Bucket }),
        ...(input.S3Key != null && { S3Key: input.S3Key }),
        ...(input.S3ObjectVersion != null && { S3ObjectVersion: input.S3ObjectVersion }),
        ...(input.ZipFile != null && { ZipFile: context.base64Encoder(input.ZipFile) }),
    });
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
export const se_UpdateFunctionConfigurationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2015-03-31/functions/{FunctionName}/configuration";
    resolvedPath = __resolvedPath(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    let body;
    body = JSON.stringify({
        ...(input.DeadLetterConfig != null && { DeadLetterConfig: se_DeadLetterConfig(input.DeadLetterConfig, context) }),
        ...(input.Description != null && { Description: input.Description }),
        ...(input.Environment != null && { Environment: se_Environment(input.Environment, context) }),
        ...(input.EphemeralStorage != null && { EphemeralStorage: se_EphemeralStorage(input.EphemeralStorage, context) }),
        ...(input.FileSystemConfigs != null && {
            FileSystemConfigs: se_FileSystemConfigList(input.FileSystemConfigs, context),
        }),
        ...(input.Handler != null && { Handler: input.Handler }),
        ...(input.ImageConfig != null && { ImageConfig: se_ImageConfig(input.ImageConfig, context) }),
        ...(input.KMSKeyArn != null && { KMSKeyArn: input.KMSKeyArn }),
        ...(input.Layers != null && { Layers: se_LayerList(input.Layers, context) }),
        ...(input.MemorySize != null && { MemorySize: input.MemorySize }),
        ...(input.RevisionId != null && { RevisionId: input.RevisionId }),
        ...(input.Role != null && { Role: input.Role }),
        ...(input.Runtime != null && { Runtime: input.Runtime }),
        ...(input.SnapStart != null && { SnapStart: se_SnapStart(input.SnapStart, context) }),
        ...(input.Timeout != null && { Timeout: input.Timeout }),
        ...(input.TracingConfig != null && { TracingConfig: se_TracingConfig(input.TracingConfig, context) }),
        ...(input.VpcConfig != null && { VpcConfig: se_VpcConfig(input.VpcConfig, context) }),
    });
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
export const se_UpdateFunctionEventInvokeConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2019-09-25/functions/{FunctionName}/event-invoke-config";
    resolvedPath = __resolvedPath(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Qualifier: [, input.Qualifier],
    });
    let body;
    body = JSON.stringify({
        ...(input.DestinationConfig != null && {
            DestinationConfig: se_DestinationConfig(input.DestinationConfig, context),
        }),
        ...(input.MaximumEventAgeInSeconds != null && { MaximumEventAgeInSeconds: input.MaximumEventAgeInSeconds }),
        ...(input.MaximumRetryAttempts != null && { MaximumRetryAttempts: input.MaximumRetryAttempts }),
    });
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
export const se_UpdateFunctionUrlConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2021-10-31/functions/{FunctionName}/url";
    resolvedPath = __resolvedPath(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Qualifier: [, input.Qualifier],
    });
    let body;
    body = JSON.stringify({
        ...(input.AuthType != null && { AuthType: input.AuthType }),
        ...(input.Cors != null && { Cors: se_Cors(input.Cors, context) }),
        ...(input.InvokeMode != null && { InvokeMode: input.InvokeMode }),
    });
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
export const de_AddLayerVersionPermissionCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_AddLayerVersionPermissionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.RevisionId != null) {
        contents.RevisionId = __expectString(data.RevisionId);
    }
    if (data.Statement != null) {
        contents.Statement = __expectString(data.Statement);
    }
    return contents;
};
const de_AddLayerVersionPermissionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "PolicyLengthExceededException":
        case "com.amazonaws.lambda#PolicyLengthExceededException":
            throw await de_PolicyLengthExceededExceptionRes(parsedOutput, context);
        case "PreconditionFailedException":
        case "com.amazonaws.lambda#PreconditionFailedException":
            throw await de_PreconditionFailedExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_AddPermissionCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_AddPermissionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.Statement != null) {
        contents.Statement = __expectString(data.Statement);
    }
    return contents;
};
const de_AddPermissionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "PolicyLengthExceededException":
        case "com.amazonaws.lambda#PolicyLengthExceededException":
            throw await de_PolicyLengthExceededExceptionRes(parsedOutput, context);
        case "PreconditionFailedException":
        case "com.amazonaws.lambda#PreconditionFailedException":
            throw await de_PreconditionFailedExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_CreateAliasCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateAliasCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.AliasArn != null) {
        contents.AliasArn = __expectString(data.AliasArn);
    }
    if (data.Description != null) {
        contents.Description = __expectString(data.Description);
    }
    if (data.FunctionVersion != null) {
        contents.FunctionVersion = __expectString(data.FunctionVersion);
    }
    if (data.Name != null) {
        contents.Name = __expectString(data.Name);
    }
    if (data.RevisionId != null) {
        contents.RevisionId = __expectString(data.RevisionId);
    }
    if (data.RoutingConfig != null) {
        contents.RoutingConfig = de_AliasRoutingConfiguration(data.RoutingConfig, context);
    }
    return contents;
};
const de_CreateAliasCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_CreateCodeSigningConfigCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateCodeSigningConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.CodeSigningConfig != null) {
        contents.CodeSigningConfig = de_CodeSigningConfig(data.CodeSigningConfig, context);
    }
    return contents;
};
const de_CreateCodeSigningConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_CreateEventSourceMappingCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CreateEventSourceMappingCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.AmazonManagedKafkaEventSourceConfig != null) {
        contents.AmazonManagedKafkaEventSourceConfig = de_AmazonManagedKafkaEventSourceConfig(data.AmazonManagedKafkaEventSourceConfig, context);
    }
    if (data.BatchSize != null) {
        contents.BatchSize = __expectInt32(data.BatchSize);
    }
    if (data.BisectBatchOnFunctionError != null) {
        contents.BisectBatchOnFunctionError = __expectBoolean(data.BisectBatchOnFunctionError);
    }
    if (data.DestinationConfig != null) {
        contents.DestinationConfig = de_DestinationConfig(data.DestinationConfig, context);
    }
    if (data.DocumentDBEventSourceConfig != null) {
        contents.DocumentDBEventSourceConfig = de_DocumentDBEventSourceConfig(data.DocumentDBEventSourceConfig, context);
    }
    if (data.EventSourceArn != null) {
        contents.EventSourceArn = __expectString(data.EventSourceArn);
    }
    if (data.FilterCriteria != null) {
        contents.FilterCriteria = de_FilterCriteria(data.FilterCriteria, context);
    }
    if (data.FunctionArn != null) {
        contents.FunctionArn = __expectString(data.FunctionArn);
    }
    if (data.FunctionResponseTypes != null) {
        contents.FunctionResponseTypes = de_FunctionResponseTypeList(data.FunctionResponseTypes, context);
    }
    if (data.LastModified != null) {
        contents.LastModified = __expectNonNull(__parseEpochTimestamp(__expectNumber(data.LastModified)));
    }
    if (data.LastProcessingResult != null) {
        contents.LastProcessingResult = __expectString(data.LastProcessingResult);
    }
    if (data.MaximumBatchingWindowInSeconds != null) {
        contents.MaximumBatchingWindowInSeconds = __expectInt32(data.MaximumBatchingWindowInSeconds);
    }
    if (data.MaximumRecordAgeInSeconds != null) {
        contents.MaximumRecordAgeInSeconds = __expectInt32(data.MaximumRecordAgeInSeconds);
    }
    if (data.MaximumRetryAttempts != null) {
        contents.MaximumRetryAttempts = __expectInt32(data.MaximumRetryAttempts);
    }
    if (data.ParallelizationFactor != null) {
        contents.ParallelizationFactor = __expectInt32(data.ParallelizationFactor);
    }
    if (data.Queues != null) {
        contents.Queues = de_Queues(data.Queues, context);
    }
    if (data.ScalingConfig != null) {
        contents.ScalingConfig = de_ScalingConfig(data.ScalingConfig, context);
    }
    if (data.SelfManagedEventSource != null) {
        contents.SelfManagedEventSource = de_SelfManagedEventSource(data.SelfManagedEventSource, context);
    }
    if (data.SelfManagedKafkaEventSourceConfig != null) {
        contents.SelfManagedKafkaEventSourceConfig = de_SelfManagedKafkaEventSourceConfig(data.SelfManagedKafkaEventSourceConfig, context);
    }
    if (data.SourceAccessConfigurations != null) {
        contents.SourceAccessConfigurations = de_SourceAccessConfigurations(data.SourceAccessConfigurations, context);
    }
    if (data.StartingPosition != null) {
        contents.StartingPosition = __expectString(data.StartingPosition);
    }
    if (data.StartingPositionTimestamp != null) {
        contents.StartingPositionTimestamp = __expectNonNull(__parseEpochTimestamp(__expectNumber(data.StartingPositionTimestamp)));
    }
    if (data.State != null) {
        contents.State = __expectString(data.State);
    }
    if (data.StateTransitionReason != null) {
        contents.StateTransitionReason = __expectString(data.StateTransitionReason);
    }
    if (data.Topics != null) {
        contents.Topics = de_Topics(data.Topics, context);
    }
    if (data.TumblingWindowInSeconds != null) {
        contents.TumblingWindowInSeconds = __expectInt32(data.TumblingWindowInSeconds);
    }
    if (data.UUID != null) {
        contents.UUID = __expectString(data.UUID);
    }
    return contents;
};
const de_CreateEventSourceMappingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_CreateFunctionCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateFunctionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.Architectures != null) {
        contents.Architectures = de_ArchitecturesList(data.Architectures, context);
    }
    if (data.CodeSha256 != null) {
        contents.CodeSha256 = __expectString(data.CodeSha256);
    }
    if (data.CodeSize != null) {
        contents.CodeSize = __expectLong(data.CodeSize);
    }
    if (data.DeadLetterConfig != null) {
        contents.DeadLetterConfig = de_DeadLetterConfig(data.DeadLetterConfig, context);
    }
    if (data.Description != null) {
        contents.Description = __expectString(data.Description);
    }
    if (data.Environment != null) {
        contents.Environment = de_EnvironmentResponse(data.Environment, context);
    }
    if (data.EphemeralStorage != null) {
        contents.EphemeralStorage = de_EphemeralStorage(data.EphemeralStorage, context);
    }
    if (data.FileSystemConfigs != null) {
        contents.FileSystemConfigs = de_FileSystemConfigList(data.FileSystemConfigs, context);
    }
    if (data.FunctionArn != null) {
        contents.FunctionArn = __expectString(data.FunctionArn);
    }
    if (data.FunctionName != null) {
        contents.FunctionName = __expectString(data.FunctionName);
    }
    if (data.Handler != null) {
        contents.Handler = __expectString(data.Handler);
    }
    if (data.ImageConfigResponse != null) {
        contents.ImageConfigResponse = de_ImageConfigResponse(data.ImageConfigResponse, context);
    }
    if (data.KMSKeyArn != null) {
        contents.KMSKeyArn = __expectString(data.KMSKeyArn);
    }
    if (data.LastModified != null) {
        contents.LastModified = __expectString(data.LastModified);
    }
    if (data.LastUpdateStatus != null) {
        contents.LastUpdateStatus = __expectString(data.LastUpdateStatus);
    }
    if (data.LastUpdateStatusReason != null) {
        contents.LastUpdateStatusReason = __expectString(data.LastUpdateStatusReason);
    }
    if (data.LastUpdateStatusReasonCode != null) {
        contents.LastUpdateStatusReasonCode = __expectString(data.LastUpdateStatusReasonCode);
    }
    if (data.Layers != null) {
        contents.Layers = de_LayersReferenceList(data.Layers, context);
    }
    if (data.MasterArn != null) {
        contents.MasterArn = __expectString(data.MasterArn);
    }
    if (data.MemorySize != null) {
        contents.MemorySize = __expectInt32(data.MemorySize);
    }
    if (data.PackageType != null) {
        contents.PackageType = __expectString(data.PackageType);
    }
    if (data.RevisionId != null) {
        contents.RevisionId = __expectString(data.RevisionId);
    }
    if (data.Role != null) {
        contents.Role = __expectString(data.Role);
    }
    if (data.Runtime != null) {
        contents.Runtime = __expectString(data.Runtime);
    }
    if (data.RuntimeVersionConfig != null) {
        contents.RuntimeVersionConfig = de_RuntimeVersionConfig(data.RuntimeVersionConfig, context);
    }
    if (data.SigningJobArn != null) {
        contents.SigningJobArn = __expectString(data.SigningJobArn);
    }
    if (data.SigningProfileVersionArn != null) {
        contents.SigningProfileVersionArn = __expectString(data.SigningProfileVersionArn);
    }
    if (data.SnapStart != null) {
        contents.SnapStart = de_SnapStartResponse(data.SnapStart, context);
    }
    if (data.State != null) {
        contents.State = __expectString(data.State);
    }
    if (data.StateReason != null) {
        contents.StateReason = __expectString(data.StateReason);
    }
    if (data.StateReasonCode != null) {
        contents.StateReasonCode = __expectString(data.StateReasonCode);
    }
    if (data.Timeout != null) {
        contents.Timeout = __expectInt32(data.Timeout);
    }
    if (data.TracingConfig != null) {
        contents.TracingConfig = de_TracingConfigResponse(data.TracingConfig, context);
    }
    if (data.Version != null) {
        contents.Version = __expectString(data.Version);
    }
    if (data.VpcConfig != null) {
        contents.VpcConfig = de_VpcConfigResponse(data.VpcConfig, context);
    }
    return contents;
};
const de_CreateFunctionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CodeSigningConfigNotFoundException":
        case "com.amazonaws.lambda#CodeSigningConfigNotFoundException":
            throw await de_CodeSigningConfigNotFoundExceptionRes(parsedOutput, context);
        case "CodeStorageExceededException":
        case "com.amazonaws.lambda#CodeStorageExceededException":
            throw await de_CodeStorageExceededExceptionRes(parsedOutput, context);
        case "CodeVerificationFailedException":
        case "com.amazonaws.lambda#CodeVerificationFailedException":
            throw await de_CodeVerificationFailedExceptionRes(parsedOutput, context);
        case "InvalidCodeSignatureException":
        case "com.amazonaws.lambda#InvalidCodeSignatureException":
            throw await de_InvalidCodeSignatureExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_CreateFunctionUrlConfigCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateFunctionUrlConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.AuthType != null) {
        contents.AuthType = __expectString(data.AuthType);
    }
    if (data.Cors != null) {
        contents.Cors = de_Cors(data.Cors, context);
    }
    if (data.CreationTime != null) {
        contents.CreationTime = __expectString(data.CreationTime);
    }
    if (data.FunctionArn != null) {
        contents.FunctionArn = __expectString(data.FunctionArn);
    }
    if (data.FunctionUrl != null) {
        contents.FunctionUrl = __expectString(data.FunctionUrl);
    }
    if (data.InvokeMode != null) {
        contents.InvokeMode = __expectString(data.InvokeMode);
    }
    return contents;
};
const de_CreateFunctionUrlConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_DeleteAliasCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteAliasCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const de_DeleteAliasCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_DeleteCodeSigningConfigCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteCodeSigningConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const de_DeleteCodeSigningConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_DeleteEventSourceMappingCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_DeleteEventSourceMappingCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.AmazonManagedKafkaEventSourceConfig != null) {
        contents.AmazonManagedKafkaEventSourceConfig = de_AmazonManagedKafkaEventSourceConfig(data.AmazonManagedKafkaEventSourceConfig, context);
    }
    if (data.BatchSize != null) {
        contents.BatchSize = __expectInt32(data.BatchSize);
    }
    if (data.BisectBatchOnFunctionError != null) {
        contents.BisectBatchOnFunctionError = __expectBoolean(data.BisectBatchOnFunctionError);
    }
    if (data.DestinationConfig != null) {
        contents.DestinationConfig = de_DestinationConfig(data.DestinationConfig, context);
    }
    if (data.DocumentDBEventSourceConfig != null) {
        contents.DocumentDBEventSourceConfig = de_DocumentDBEventSourceConfig(data.DocumentDBEventSourceConfig, context);
    }
    if (data.EventSourceArn != null) {
        contents.EventSourceArn = __expectString(data.EventSourceArn);
    }
    if (data.FilterCriteria != null) {
        contents.FilterCriteria = de_FilterCriteria(data.FilterCriteria, context);
    }
    if (data.FunctionArn != null) {
        contents.FunctionArn = __expectString(data.FunctionArn);
    }
    if (data.FunctionResponseTypes != null) {
        contents.FunctionResponseTypes = de_FunctionResponseTypeList(data.FunctionResponseTypes, context);
    }
    if (data.LastModified != null) {
        contents.LastModified = __expectNonNull(__parseEpochTimestamp(__expectNumber(data.LastModified)));
    }
    if (data.LastProcessingResult != null) {
        contents.LastProcessingResult = __expectString(data.LastProcessingResult);
    }
    if (data.MaximumBatchingWindowInSeconds != null) {
        contents.MaximumBatchingWindowInSeconds = __expectInt32(data.MaximumBatchingWindowInSeconds);
    }
    if (data.MaximumRecordAgeInSeconds != null) {
        contents.MaximumRecordAgeInSeconds = __expectInt32(data.MaximumRecordAgeInSeconds);
    }
    if (data.MaximumRetryAttempts != null) {
        contents.MaximumRetryAttempts = __expectInt32(data.MaximumRetryAttempts);
    }
    if (data.ParallelizationFactor != null) {
        contents.ParallelizationFactor = __expectInt32(data.ParallelizationFactor);
    }
    if (data.Queues != null) {
        contents.Queues = de_Queues(data.Queues, context);
    }
    if (data.ScalingConfig != null) {
        contents.ScalingConfig = de_ScalingConfig(data.ScalingConfig, context);
    }
    if (data.SelfManagedEventSource != null) {
        contents.SelfManagedEventSource = de_SelfManagedEventSource(data.SelfManagedEventSource, context);
    }
    if (data.SelfManagedKafkaEventSourceConfig != null) {
        contents.SelfManagedKafkaEventSourceConfig = de_SelfManagedKafkaEventSourceConfig(data.SelfManagedKafkaEventSourceConfig, context);
    }
    if (data.SourceAccessConfigurations != null) {
        contents.SourceAccessConfigurations = de_SourceAccessConfigurations(data.SourceAccessConfigurations, context);
    }
    if (data.StartingPosition != null) {
        contents.StartingPosition = __expectString(data.StartingPosition);
    }
    if (data.StartingPositionTimestamp != null) {
        contents.StartingPositionTimestamp = __expectNonNull(__parseEpochTimestamp(__expectNumber(data.StartingPositionTimestamp)));
    }
    if (data.State != null) {
        contents.State = __expectString(data.State);
    }
    if (data.StateTransitionReason != null) {
        contents.StateTransitionReason = __expectString(data.StateTransitionReason);
    }
    if (data.Topics != null) {
        contents.Topics = de_Topics(data.Topics, context);
    }
    if (data.TumblingWindowInSeconds != null) {
        contents.TumblingWindowInSeconds = __expectInt32(data.TumblingWindowInSeconds);
    }
    if (data.UUID != null) {
        contents.UUID = __expectString(data.UUID);
    }
    return contents;
};
const de_DeleteEventSourceMappingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.lambda#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_DeleteFunctionCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteFunctionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const de_DeleteFunctionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_DeleteFunctionCodeSigningConfigCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteFunctionCodeSigningConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const de_DeleteFunctionCodeSigningConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CodeSigningConfigNotFoundException":
        case "com.amazonaws.lambda#CodeSigningConfigNotFoundException":
            throw await de_CodeSigningConfigNotFoundExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_DeleteFunctionConcurrencyCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteFunctionConcurrencyCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const de_DeleteFunctionConcurrencyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_DeleteFunctionEventInvokeConfigCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteFunctionEventInvokeConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const de_DeleteFunctionEventInvokeConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_DeleteFunctionUrlConfigCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteFunctionUrlConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const de_DeleteFunctionUrlConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_DeleteLayerVersionCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteLayerVersionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const de_DeleteLayerVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_DeleteProvisionedConcurrencyConfigCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteProvisionedConcurrencyConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const de_DeleteProvisionedConcurrencyConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_GetAccountSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetAccountSettingsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.AccountLimit != null) {
        contents.AccountLimit = de_AccountLimit(data.AccountLimit, context);
    }
    if (data.AccountUsage != null) {
        contents.AccountUsage = de_AccountUsage(data.AccountUsage, context);
    }
    return contents;
};
const de_GetAccountSettingsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_GetAliasCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetAliasCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.AliasArn != null) {
        contents.AliasArn = __expectString(data.AliasArn);
    }
    if (data.Description != null) {
        contents.Description = __expectString(data.Description);
    }
    if (data.FunctionVersion != null) {
        contents.FunctionVersion = __expectString(data.FunctionVersion);
    }
    if (data.Name != null) {
        contents.Name = __expectString(data.Name);
    }
    if (data.RevisionId != null) {
        contents.RevisionId = __expectString(data.RevisionId);
    }
    if (data.RoutingConfig != null) {
        contents.RoutingConfig = de_AliasRoutingConfiguration(data.RoutingConfig, context);
    }
    return contents;
};
const de_GetAliasCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_GetCodeSigningConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetCodeSigningConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.CodeSigningConfig != null) {
        contents.CodeSigningConfig = de_CodeSigningConfig(data.CodeSigningConfig, context);
    }
    return contents;
};
const de_GetCodeSigningConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_GetEventSourceMappingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetEventSourceMappingCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.AmazonManagedKafkaEventSourceConfig != null) {
        contents.AmazonManagedKafkaEventSourceConfig = de_AmazonManagedKafkaEventSourceConfig(data.AmazonManagedKafkaEventSourceConfig, context);
    }
    if (data.BatchSize != null) {
        contents.BatchSize = __expectInt32(data.BatchSize);
    }
    if (data.BisectBatchOnFunctionError != null) {
        contents.BisectBatchOnFunctionError = __expectBoolean(data.BisectBatchOnFunctionError);
    }
    if (data.DestinationConfig != null) {
        contents.DestinationConfig = de_DestinationConfig(data.DestinationConfig, context);
    }
    if (data.DocumentDBEventSourceConfig != null) {
        contents.DocumentDBEventSourceConfig = de_DocumentDBEventSourceConfig(data.DocumentDBEventSourceConfig, context);
    }
    if (data.EventSourceArn != null) {
        contents.EventSourceArn = __expectString(data.EventSourceArn);
    }
    if (data.FilterCriteria != null) {
        contents.FilterCriteria = de_FilterCriteria(data.FilterCriteria, context);
    }
    if (data.FunctionArn != null) {
        contents.FunctionArn = __expectString(data.FunctionArn);
    }
    if (data.FunctionResponseTypes != null) {
        contents.FunctionResponseTypes = de_FunctionResponseTypeList(data.FunctionResponseTypes, context);
    }
    if (data.LastModified != null) {
        contents.LastModified = __expectNonNull(__parseEpochTimestamp(__expectNumber(data.LastModified)));
    }
    if (data.LastProcessingResult != null) {
        contents.LastProcessingResult = __expectString(data.LastProcessingResult);
    }
    if (data.MaximumBatchingWindowInSeconds != null) {
        contents.MaximumBatchingWindowInSeconds = __expectInt32(data.MaximumBatchingWindowInSeconds);
    }
    if (data.MaximumRecordAgeInSeconds != null) {
        contents.MaximumRecordAgeInSeconds = __expectInt32(data.MaximumRecordAgeInSeconds);
    }
    if (data.MaximumRetryAttempts != null) {
        contents.MaximumRetryAttempts = __expectInt32(data.MaximumRetryAttempts);
    }
    if (data.ParallelizationFactor != null) {
        contents.ParallelizationFactor = __expectInt32(data.ParallelizationFactor);
    }
    if (data.Queues != null) {
        contents.Queues = de_Queues(data.Queues, context);
    }
    if (data.ScalingConfig != null) {
        contents.ScalingConfig = de_ScalingConfig(data.ScalingConfig, context);
    }
    if (data.SelfManagedEventSource != null) {
        contents.SelfManagedEventSource = de_SelfManagedEventSource(data.SelfManagedEventSource, context);
    }
    if (data.SelfManagedKafkaEventSourceConfig != null) {
        contents.SelfManagedKafkaEventSourceConfig = de_SelfManagedKafkaEventSourceConfig(data.SelfManagedKafkaEventSourceConfig, context);
    }
    if (data.SourceAccessConfigurations != null) {
        contents.SourceAccessConfigurations = de_SourceAccessConfigurations(data.SourceAccessConfigurations, context);
    }
    if (data.StartingPosition != null) {
        contents.StartingPosition = __expectString(data.StartingPosition);
    }
    if (data.StartingPositionTimestamp != null) {
        contents.StartingPositionTimestamp = __expectNonNull(__parseEpochTimestamp(__expectNumber(data.StartingPositionTimestamp)));
    }
    if (data.State != null) {
        contents.State = __expectString(data.State);
    }
    if (data.StateTransitionReason != null) {
        contents.StateTransitionReason = __expectString(data.StateTransitionReason);
    }
    if (data.Topics != null) {
        contents.Topics = de_Topics(data.Topics, context);
    }
    if (data.TumblingWindowInSeconds != null) {
        contents.TumblingWindowInSeconds = __expectInt32(data.TumblingWindowInSeconds);
    }
    if (data.UUID != null) {
        contents.UUID = __expectString(data.UUID);
    }
    return contents;
};
const de_GetEventSourceMappingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_GetFunctionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetFunctionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.Code != null) {
        contents.Code = de_FunctionCodeLocation(data.Code, context);
    }
    if (data.Concurrency != null) {
        contents.Concurrency = de_Concurrency(data.Concurrency, context);
    }
    if (data.Configuration != null) {
        contents.Configuration = de_FunctionConfiguration(data.Configuration, context);
    }
    if (data.Tags != null) {
        contents.Tags = de_Tags(data.Tags, context);
    }
    return contents;
};
const de_GetFunctionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_GetFunctionCodeSigningConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetFunctionCodeSigningConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.CodeSigningConfigArn != null) {
        contents.CodeSigningConfigArn = __expectString(data.CodeSigningConfigArn);
    }
    if (data.FunctionName != null) {
        contents.FunctionName = __expectString(data.FunctionName);
    }
    return contents;
};
const de_GetFunctionCodeSigningConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_GetFunctionConcurrencyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetFunctionConcurrencyCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.ReservedConcurrentExecutions != null) {
        contents.ReservedConcurrentExecutions = __expectInt32(data.ReservedConcurrentExecutions);
    }
    return contents;
};
const de_GetFunctionConcurrencyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_GetFunctionConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetFunctionConfigurationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.Architectures != null) {
        contents.Architectures = de_ArchitecturesList(data.Architectures, context);
    }
    if (data.CodeSha256 != null) {
        contents.CodeSha256 = __expectString(data.CodeSha256);
    }
    if (data.CodeSize != null) {
        contents.CodeSize = __expectLong(data.CodeSize);
    }
    if (data.DeadLetterConfig != null) {
        contents.DeadLetterConfig = de_DeadLetterConfig(data.DeadLetterConfig, context);
    }
    if (data.Description != null) {
        contents.Description = __expectString(data.Description);
    }
    if (data.Environment != null) {
        contents.Environment = de_EnvironmentResponse(data.Environment, context);
    }
    if (data.EphemeralStorage != null) {
        contents.EphemeralStorage = de_EphemeralStorage(data.EphemeralStorage, context);
    }
    if (data.FileSystemConfigs != null) {
        contents.FileSystemConfigs = de_FileSystemConfigList(data.FileSystemConfigs, context);
    }
    if (data.FunctionArn != null) {
        contents.FunctionArn = __expectString(data.FunctionArn);
    }
    if (data.FunctionName != null) {
        contents.FunctionName = __expectString(data.FunctionName);
    }
    if (data.Handler != null) {
        contents.Handler = __expectString(data.Handler);
    }
    if (data.ImageConfigResponse != null) {
        contents.ImageConfigResponse = de_ImageConfigResponse(data.ImageConfigResponse, context);
    }
    if (data.KMSKeyArn != null) {
        contents.KMSKeyArn = __expectString(data.KMSKeyArn);
    }
    if (data.LastModified != null) {
        contents.LastModified = __expectString(data.LastModified);
    }
    if (data.LastUpdateStatus != null) {
        contents.LastUpdateStatus = __expectString(data.LastUpdateStatus);
    }
    if (data.LastUpdateStatusReason != null) {
        contents.LastUpdateStatusReason = __expectString(data.LastUpdateStatusReason);
    }
    if (data.LastUpdateStatusReasonCode != null) {
        contents.LastUpdateStatusReasonCode = __expectString(data.LastUpdateStatusReasonCode);
    }
    if (data.Layers != null) {
        contents.Layers = de_LayersReferenceList(data.Layers, context);
    }
    if (data.MasterArn != null) {
        contents.MasterArn = __expectString(data.MasterArn);
    }
    if (data.MemorySize != null) {
        contents.MemorySize = __expectInt32(data.MemorySize);
    }
    if (data.PackageType != null) {
        contents.PackageType = __expectString(data.PackageType);
    }
    if (data.RevisionId != null) {
        contents.RevisionId = __expectString(data.RevisionId);
    }
    if (data.Role != null) {
        contents.Role = __expectString(data.Role);
    }
    if (data.Runtime != null) {
        contents.Runtime = __expectString(data.Runtime);
    }
    if (data.RuntimeVersionConfig != null) {
        contents.RuntimeVersionConfig = de_RuntimeVersionConfig(data.RuntimeVersionConfig, context);
    }
    if (data.SigningJobArn != null) {
        contents.SigningJobArn = __expectString(data.SigningJobArn);
    }
    if (data.SigningProfileVersionArn != null) {
        contents.SigningProfileVersionArn = __expectString(data.SigningProfileVersionArn);
    }
    if (data.SnapStart != null) {
        contents.SnapStart = de_SnapStartResponse(data.SnapStart, context);
    }
    if (data.State != null) {
        contents.State = __expectString(data.State);
    }
    if (data.StateReason != null) {
        contents.StateReason = __expectString(data.StateReason);
    }
    if (data.StateReasonCode != null) {
        contents.StateReasonCode = __expectString(data.StateReasonCode);
    }
    if (data.Timeout != null) {
        contents.Timeout = __expectInt32(data.Timeout);
    }
    if (data.TracingConfig != null) {
        contents.TracingConfig = de_TracingConfigResponse(data.TracingConfig, context);
    }
    if (data.Version != null) {
        contents.Version = __expectString(data.Version);
    }
    if (data.VpcConfig != null) {
        contents.VpcConfig = de_VpcConfigResponse(data.VpcConfig, context);
    }
    return contents;
};
const de_GetFunctionConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_GetFunctionEventInvokeConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetFunctionEventInvokeConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.DestinationConfig != null) {
        contents.DestinationConfig = de_DestinationConfig(data.DestinationConfig, context);
    }
    if (data.FunctionArn != null) {
        contents.FunctionArn = __expectString(data.FunctionArn);
    }
    if (data.LastModified != null) {
        contents.LastModified = __expectNonNull(__parseEpochTimestamp(__expectNumber(data.LastModified)));
    }
    if (data.MaximumEventAgeInSeconds != null) {
        contents.MaximumEventAgeInSeconds = __expectInt32(data.MaximumEventAgeInSeconds);
    }
    if (data.MaximumRetryAttempts != null) {
        contents.MaximumRetryAttempts = __expectInt32(data.MaximumRetryAttempts);
    }
    return contents;
};
const de_GetFunctionEventInvokeConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_GetFunctionUrlConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetFunctionUrlConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.AuthType != null) {
        contents.AuthType = __expectString(data.AuthType);
    }
    if (data.Cors != null) {
        contents.Cors = de_Cors(data.Cors, context);
    }
    if (data.CreationTime != null) {
        contents.CreationTime = __expectString(data.CreationTime);
    }
    if (data.FunctionArn != null) {
        contents.FunctionArn = __expectString(data.FunctionArn);
    }
    if (data.FunctionUrl != null) {
        contents.FunctionUrl = __expectString(data.FunctionUrl);
    }
    if (data.InvokeMode != null) {
        contents.InvokeMode = __expectString(data.InvokeMode);
    }
    if (data.LastModifiedTime != null) {
        contents.LastModifiedTime = __expectString(data.LastModifiedTime);
    }
    return contents;
};
const de_GetFunctionUrlConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_GetLayerVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetLayerVersionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.CompatibleArchitectures != null) {
        contents.CompatibleArchitectures = de_CompatibleArchitectures(data.CompatibleArchitectures, context);
    }
    if (data.CompatibleRuntimes != null) {
        contents.CompatibleRuntimes = de_CompatibleRuntimes(data.CompatibleRuntimes, context);
    }
    if (data.Content != null) {
        contents.Content = de_LayerVersionContentOutput(data.Content, context);
    }
    if (data.CreatedDate != null) {
        contents.CreatedDate = __expectString(data.CreatedDate);
    }
    if (data.Description != null) {
        contents.Description = __expectString(data.Description);
    }
    if (data.LayerArn != null) {
        contents.LayerArn = __expectString(data.LayerArn);
    }
    if (data.LayerVersionArn != null) {
        contents.LayerVersionArn = __expectString(data.LayerVersionArn);
    }
    if (data.LicenseInfo != null) {
        contents.LicenseInfo = __expectString(data.LicenseInfo);
    }
    if (data.Version != null) {
        contents.Version = __expectLong(data.Version);
    }
    return contents;
};
const de_GetLayerVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_GetLayerVersionByArnCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetLayerVersionByArnCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.CompatibleArchitectures != null) {
        contents.CompatibleArchitectures = de_CompatibleArchitectures(data.CompatibleArchitectures, context);
    }
    if (data.CompatibleRuntimes != null) {
        contents.CompatibleRuntimes = de_CompatibleRuntimes(data.CompatibleRuntimes, context);
    }
    if (data.Content != null) {
        contents.Content = de_LayerVersionContentOutput(data.Content, context);
    }
    if (data.CreatedDate != null) {
        contents.CreatedDate = __expectString(data.CreatedDate);
    }
    if (data.Description != null) {
        contents.Description = __expectString(data.Description);
    }
    if (data.LayerArn != null) {
        contents.LayerArn = __expectString(data.LayerArn);
    }
    if (data.LayerVersionArn != null) {
        contents.LayerVersionArn = __expectString(data.LayerVersionArn);
    }
    if (data.LicenseInfo != null) {
        contents.LicenseInfo = __expectString(data.LicenseInfo);
    }
    if (data.Version != null) {
        contents.Version = __expectLong(data.Version);
    }
    return contents;
};
const de_GetLayerVersionByArnCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_GetLayerVersionPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetLayerVersionPolicyCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.Policy != null) {
        contents.Policy = __expectString(data.Policy);
    }
    if (data.RevisionId != null) {
        contents.RevisionId = __expectString(data.RevisionId);
    }
    return contents;
};
const de_GetLayerVersionPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_GetPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetPolicyCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.Policy != null) {
        contents.Policy = __expectString(data.Policy);
    }
    if (data.RevisionId != null) {
        contents.RevisionId = __expectString(data.RevisionId);
    }
    return contents;
};
const de_GetPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_GetProvisionedConcurrencyConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetProvisionedConcurrencyConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.AllocatedProvisionedConcurrentExecutions != null) {
        contents.AllocatedProvisionedConcurrentExecutions = __expectInt32(data.AllocatedProvisionedConcurrentExecutions);
    }
    if (data.AvailableProvisionedConcurrentExecutions != null) {
        contents.AvailableProvisionedConcurrentExecutions = __expectInt32(data.AvailableProvisionedConcurrentExecutions);
    }
    if (data.LastModified != null) {
        contents.LastModified = __expectString(data.LastModified);
    }
    if (data.RequestedProvisionedConcurrentExecutions != null) {
        contents.RequestedProvisionedConcurrentExecutions = __expectInt32(data.RequestedProvisionedConcurrentExecutions);
    }
    if (data.Status != null) {
        contents.Status = __expectString(data.Status);
    }
    if (data.StatusReason != null) {
        contents.StatusReason = __expectString(data.StatusReason);
    }
    return contents;
};
const de_GetProvisionedConcurrencyConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ProvisionedConcurrencyConfigNotFoundException":
        case "com.amazonaws.lambda#ProvisionedConcurrencyConfigNotFoundException":
            throw await de_ProvisionedConcurrencyConfigNotFoundExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_GetRuntimeManagementConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetRuntimeManagementConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.FunctionArn != null) {
        contents.FunctionArn = __expectString(data.FunctionArn);
    }
    if (data.RuntimeVersionArn != null) {
        contents.RuntimeVersionArn = __expectString(data.RuntimeVersionArn);
    }
    if (data.UpdateRuntimeOn != null) {
        contents.UpdateRuntimeOn = __expectString(data.UpdateRuntimeOn);
    }
    return contents;
};
const de_GetRuntimeManagementConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_InvokeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_InvokeCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        FunctionError: [, output.headers["x-amz-function-error"]],
        LogResult: [, output.headers["x-amz-log-result"]],
        ExecutedVersion: [, output.headers["x-amz-executed-version"]],
    });
    const data = await collectBody(output.body, context);
    contents.Payload = data;
    map(contents, {
        StatusCode: [, output.statusCode],
    });
    return contents;
};
const de_InvokeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EC2AccessDeniedException":
        case "com.amazonaws.lambda#EC2AccessDeniedException":
            throw await de_EC2AccessDeniedExceptionRes(parsedOutput, context);
        case "EC2ThrottledException":
        case "com.amazonaws.lambda#EC2ThrottledException":
            throw await de_EC2ThrottledExceptionRes(parsedOutput, context);
        case "EC2UnexpectedException":
        case "com.amazonaws.lambda#EC2UnexpectedException":
            throw await de_EC2UnexpectedExceptionRes(parsedOutput, context);
        case "EFSIOException":
        case "com.amazonaws.lambda#EFSIOException":
            throw await de_EFSIOExceptionRes(parsedOutput, context);
        case "EFSMountConnectivityException":
        case "com.amazonaws.lambda#EFSMountConnectivityException":
            throw await de_EFSMountConnectivityExceptionRes(parsedOutput, context);
        case "EFSMountFailureException":
        case "com.amazonaws.lambda#EFSMountFailureException":
            throw await de_EFSMountFailureExceptionRes(parsedOutput, context);
        case "EFSMountTimeoutException":
        case "com.amazonaws.lambda#EFSMountTimeoutException":
            throw await de_EFSMountTimeoutExceptionRes(parsedOutput, context);
        case "ENILimitReachedException":
        case "com.amazonaws.lambda#ENILimitReachedException":
            throw await de_ENILimitReachedExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "InvalidRequestContentException":
        case "com.amazonaws.lambda#InvalidRequestContentException":
            throw await de_InvalidRequestContentExceptionRes(parsedOutput, context);
        case "InvalidRuntimeException":
        case "com.amazonaws.lambda#InvalidRuntimeException":
            throw await de_InvalidRuntimeExceptionRes(parsedOutput, context);
        case "InvalidSecurityGroupIDException":
        case "com.amazonaws.lambda#InvalidSecurityGroupIDException":
            throw await de_InvalidSecurityGroupIDExceptionRes(parsedOutput, context);
        case "InvalidSubnetIDException":
        case "com.amazonaws.lambda#InvalidSubnetIDException":
            throw await de_InvalidSubnetIDExceptionRes(parsedOutput, context);
        case "InvalidZipFileException":
        case "com.amazonaws.lambda#InvalidZipFileException":
            throw await de_InvalidZipFileExceptionRes(parsedOutput, context);
        case "KMSAccessDeniedException":
        case "com.amazonaws.lambda#KMSAccessDeniedException":
            throw await de_KMSAccessDeniedExceptionRes(parsedOutput, context);
        case "KMSDisabledException":
        case "com.amazonaws.lambda#KMSDisabledException":
            throw await de_KMSDisabledExceptionRes(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.lambda#KMSInvalidStateException":
            throw await de_KMSInvalidStateExceptionRes(parsedOutput, context);
        case "KMSNotFoundException":
        case "com.amazonaws.lambda#KMSNotFoundException":
            throw await de_KMSNotFoundExceptionRes(parsedOutput, context);
        case "RequestTooLargeException":
        case "com.amazonaws.lambda#RequestTooLargeException":
            throw await de_RequestTooLargeExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ResourceNotReadyException":
        case "com.amazonaws.lambda#ResourceNotReadyException":
            throw await de_ResourceNotReadyExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "SnapStartException":
        case "com.amazonaws.lambda#SnapStartException":
            throw await de_SnapStartExceptionRes(parsedOutput, context);
        case "SnapStartNotReadyException":
        case "com.amazonaws.lambda#SnapStartNotReadyException":
            throw await de_SnapStartNotReadyExceptionRes(parsedOutput, context);
        case "SnapStartTimeoutException":
        case "com.amazonaws.lambda#SnapStartTimeoutException":
            throw await de_SnapStartTimeoutExceptionRes(parsedOutput, context);
        case "SubnetIPAddressLimitReachedException":
        case "com.amazonaws.lambda#SubnetIPAddressLimitReachedException":
            throw await de_SubnetIPAddressLimitReachedExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnsupportedMediaTypeException":
        case "com.amazonaws.lambda#UnsupportedMediaTypeException":
            throw await de_UnsupportedMediaTypeExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_InvokeAsyncCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_InvokeAsyncCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    map(contents, {
        Status: [, output.statusCode],
    });
    await collectBody(output.body, context);
    return contents;
};
const de_InvokeAsyncCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidRequestContentException":
        case "com.amazonaws.lambda#InvalidRequestContentException":
            throw await de_InvalidRequestContentExceptionRes(parsedOutput, context);
        case "InvalidRuntimeException":
        case "com.amazonaws.lambda#InvalidRuntimeException":
            throw await de_InvalidRuntimeExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_InvokeWithResponseStreamCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_InvokeWithResponseStreamCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        ExecutedVersion: [, output.headers["x-amz-executed-version"]],
        ResponseStreamContentType: [, output.headers["content-type"]],
    });
    const data = output.body;
    contents.EventStream = de_InvokeWithResponseStreamResponseEvent(data, context);
    map(contents, {
        StatusCode: [, output.statusCode],
    });
    return contents;
};
const de_InvokeWithResponseStreamCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EC2AccessDeniedException":
        case "com.amazonaws.lambda#EC2AccessDeniedException":
            throw await de_EC2AccessDeniedExceptionRes(parsedOutput, context);
        case "EC2ThrottledException":
        case "com.amazonaws.lambda#EC2ThrottledException":
            throw await de_EC2ThrottledExceptionRes(parsedOutput, context);
        case "EC2UnexpectedException":
        case "com.amazonaws.lambda#EC2UnexpectedException":
            throw await de_EC2UnexpectedExceptionRes(parsedOutput, context);
        case "EFSIOException":
        case "com.amazonaws.lambda#EFSIOException":
            throw await de_EFSIOExceptionRes(parsedOutput, context);
        case "EFSMountConnectivityException":
        case "com.amazonaws.lambda#EFSMountConnectivityException":
            throw await de_EFSMountConnectivityExceptionRes(parsedOutput, context);
        case "EFSMountFailureException":
        case "com.amazonaws.lambda#EFSMountFailureException":
            throw await de_EFSMountFailureExceptionRes(parsedOutput, context);
        case "EFSMountTimeoutException":
        case "com.amazonaws.lambda#EFSMountTimeoutException":
            throw await de_EFSMountTimeoutExceptionRes(parsedOutput, context);
        case "ENILimitReachedException":
        case "com.amazonaws.lambda#ENILimitReachedException":
            throw await de_ENILimitReachedExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "InvalidRequestContentException":
        case "com.amazonaws.lambda#InvalidRequestContentException":
            throw await de_InvalidRequestContentExceptionRes(parsedOutput, context);
        case "InvalidRuntimeException":
        case "com.amazonaws.lambda#InvalidRuntimeException":
            throw await de_InvalidRuntimeExceptionRes(parsedOutput, context);
        case "InvalidSecurityGroupIDException":
        case "com.amazonaws.lambda#InvalidSecurityGroupIDException":
            throw await de_InvalidSecurityGroupIDExceptionRes(parsedOutput, context);
        case "InvalidSubnetIDException":
        case "com.amazonaws.lambda#InvalidSubnetIDException":
            throw await de_InvalidSubnetIDExceptionRes(parsedOutput, context);
        case "InvalidZipFileException":
        case "com.amazonaws.lambda#InvalidZipFileException":
            throw await de_InvalidZipFileExceptionRes(parsedOutput, context);
        case "KMSAccessDeniedException":
        case "com.amazonaws.lambda#KMSAccessDeniedException":
            throw await de_KMSAccessDeniedExceptionRes(parsedOutput, context);
        case "KMSDisabledException":
        case "com.amazonaws.lambda#KMSDisabledException":
            throw await de_KMSDisabledExceptionRes(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.lambda#KMSInvalidStateException":
            throw await de_KMSInvalidStateExceptionRes(parsedOutput, context);
        case "KMSNotFoundException":
        case "com.amazonaws.lambda#KMSNotFoundException":
            throw await de_KMSNotFoundExceptionRes(parsedOutput, context);
        case "RequestTooLargeException":
        case "com.amazonaws.lambda#RequestTooLargeException":
            throw await de_RequestTooLargeExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ResourceNotReadyException":
        case "com.amazonaws.lambda#ResourceNotReadyException":
            throw await de_ResourceNotReadyExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "SubnetIPAddressLimitReachedException":
        case "com.amazonaws.lambda#SubnetIPAddressLimitReachedException":
            throw await de_SubnetIPAddressLimitReachedExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnsupportedMediaTypeException":
        case "com.amazonaws.lambda#UnsupportedMediaTypeException":
            throw await de_UnsupportedMediaTypeExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_ListAliasesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListAliasesCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.Aliases != null) {
        contents.Aliases = de_AliasList(data.Aliases, context);
    }
    if (data.NextMarker != null) {
        contents.NextMarker = __expectString(data.NextMarker);
    }
    return contents;
};
const de_ListAliasesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_ListCodeSigningConfigsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListCodeSigningConfigsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.CodeSigningConfigs != null) {
        contents.CodeSigningConfigs = de_CodeSigningConfigList(data.CodeSigningConfigs, context);
    }
    if (data.NextMarker != null) {
        contents.NextMarker = __expectString(data.NextMarker);
    }
    return contents;
};
const de_ListCodeSigningConfigsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_ListEventSourceMappingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListEventSourceMappingsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.EventSourceMappings != null) {
        contents.EventSourceMappings = de_EventSourceMappingsList(data.EventSourceMappings, context);
    }
    if (data.NextMarker != null) {
        contents.NextMarker = __expectString(data.NextMarker);
    }
    return contents;
};
const de_ListEventSourceMappingsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_ListFunctionEventInvokeConfigsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListFunctionEventInvokeConfigsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.FunctionEventInvokeConfigs != null) {
        contents.FunctionEventInvokeConfigs = de_FunctionEventInvokeConfigList(data.FunctionEventInvokeConfigs, context);
    }
    if (data.NextMarker != null) {
        contents.NextMarker = __expectString(data.NextMarker);
    }
    return contents;
};
const de_ListFunctionEventInvokeConfigsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_ListFunctionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListFunctionsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.Functions != null) {
        contents.Functions = de_FunctionList(data.Functions, context);
    }
    if (data.NextMarker != null) {
        contents.NextMarker = __expectString(data.NextMarker);
    }
    return contents;
};
const de_ListFunctionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_ListFunctionsByCodeSigningConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListFunctionsByCodeSigningConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.FunctionArns != null) {
        contents.FunctionArns = de_FunctionArnList(data.FunctionArns, context);
    }
    if (data.NextMarker != null) {
        contents.NextMarker = __expectString(data.NextMarker);
    }
    return contents;
};
const de_ListFunctionsByCodeSigningConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_ListFunctionUrlConfigsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListFunctionUrlConfigsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.FunctionUrlConfigs != null) {
        contents.FunctionUrlConfigs = de_FunctionUrlConfigList(data.FunctionUrlConfigs, context);
    }
    if (data.NextMarker != null) {
        contents.NextMarker = __expectString(data.NextMarker);
    }
    return contents;
};
const de_ListFunctionUrlConfigsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_ListLayersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListLayersCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.Layers != null) {
        contents.Layers = de_LayersList(data.Layers, context);
    }
    if (data.NextMarker != null) {
        contents.NextMarker = __expectString(data.NextMarker);
    }
    return contents;
};
const de_ListLayersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_ListLayerVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListLayerVersionsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.LayerVersions != null) {
        contents.LayerVersions = de_LayerVersionsList(data.LayerVersions, context);
    }
    if (data.NextMarker != null) {
        contents.NextMarker = __expectString(data.NextMarker);
    }
    return contents;
};
const de_ListLayerVersionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_ListProvisionedConcurrencyConfigsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListProvisionedConcurrencyConfigsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.NextMarker != null) {
        contents.NextMarker = __expectString(data.NextMarker);
    }
    if (data.ProvisionedConcurrencyConfigs != null) {
        contents.ProvisionedConcurrencyConfigs = de_ProvisionedConcurrencyConfigList(data.ProvisionedConcurrencyConfigs, context);
    }
    return contents;
};
const de_ListProvisionedConcurrencyConfigsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_ListTagsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListTagsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.Tags != null) {
        contents.Tags = de_Tags(data.Tags, context);
    }
    return contents;
};
const de_ListTagsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_ListVersionsByFunctionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListVersionsByFunctionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.NextMarker != null) {
        contents.NextMarker = __expectString(data.NextMarker);
    }
    if (data.Versions != null) {
        contents.Versions = de_FunctionList(data.Versions, context);
    }
    return contents;
};
const de_ListVersionsByFunctionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_PublishLayerVersionCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_PublishLayerVersionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.CompatibleArchitectures != null) {
        contents.CompatibleArchitectures = de_CompatibleArchitectures(data.CompatibleArchitectures, context);
    }
    if (data.CompatibleRuntimes != null) {
        contents.CompatibleRuntimes = de_CompatibleRuntimes(data.CompatibleRuntimes, context);
    }
    if (data.Content != null) {
        contents.Content = de_LayerVersionContentOutput(data.Content, context);
    }
    if (data.CreatedDate != null) {
        contents.CreatedDate = __expectString(data.CreatedDate);
    }
    if (data.Description != null) {
        contents.Description = __expectString(data.Description);
    }
    if (data.LayerArn != null) {
        contents.LayerArn = __expectString(data.LayerArn);
    }
    if (data.LayerVersionArn != null) {
        contents.LayerVersionArn = __expectString(data.LayerVersionArn);
    }
    if (data.LicenseInfo != null) {
        contents.LicenseInfo = __expectString(data.LicenseInfo);
    }
    if (data.Version != null) {
        contents.Version = __expectLong(data.Version);
    }
    return contents;
};
const de_PublishLayerVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CodeStorageExceededException":
        case "com.amazonaws.lambda#CodeStorageExceededException":
            throw await de_CodeStorageExceededExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_PublishVersionCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_PublishVersionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.Architectures != null) {
        contents.Architectures = de_ArchitecturesList(data.Architectures, context);
    }
    if (data.CodeSha256 != null) {
        contents.CodeSha256 = __expectString(data.CodeSha256);
    }
    if (data.CodeSize != null) {
        contents.CodeSize = __expectLong(data.CodeSize);
    }
    if (data.DeadLetterConfig != null) {
        contents.DeadLetterConfig = de_DeadLetterConfig(data.DeadLetterConfig, context);
    }
    if (data.Description != null) {
        contents.Description = __expectString(data.Description);
    }
    if (data.Environment != null) {
        contents.Environment = de_EnvironmentResponse(data.Environment, context);
    }
    if (data.EphemeralStorage != null) {
        contents.EphemeralStorage = de_EphemeralStorage(data.EphemeralStorage, context);
    }
    if (data.FileSystemConfigs != null) {
        contents.FileSystemConfigs = de_FileSystemConfigList(data.FileSystemConfigs, context);
    }
    if (data.FunctionArn != null) {
        contents.FunctionArn = __expectString(data.FunctionArn);
    }
    if (data.FunctionName != null) {
        contents.FunctionName = __expectString(data.FunctionName);
    }
    if (data.Handler != null) {
        contents.Handler = __expectString(data.Handler);
    }
    if (data.ImageConfigResponse != null) {
        contents.ImageConfigResponse = de_ImageConfigResponse(data.ImageConfigResponse, context);
    }
    if (data.KMSKeyArn != null) {
        contents.KMSKeyArn = __expectString(data.KMSKeyArn);
    }
    if (data.LastModified != null) {
        contents.LastModified = __expectString(data.LastModified);
    }
    if (data.LastUpdateStatus != null) {
        contents.LastUpdateStatus = __expectString(data.LastUpdateStatus);
    }
    if (data.LastUpdateStatusReason != null) {
        contents.LastUpdateStatusReason = __expectString(data.LastUpdateStatusReason);
    }
    if (data.LastUpdateStatusReasonCode != null) {
        contents.LastUpdateStatusReasonCode = __expectString(data.LastUpdateStatusReasonCode);
    }
    if (data.Layers != null) {
        contents.Layers = de_LayersReferenceList(data.Layers, context);
    }
    if (data.MasterArn != null) {
        contents.MasterArn = __expectString(data.MasterArn);
    }
    if (data.MemorySize != null) {
        contents.MemorySize = __expectInt32(data.MemorySize);
    }
    if (data.PackageType != null) {
        contents.PackageType = __expectString(data.PackageType);
    }
    if (data.RevisionId != null) {
        contents.RevisionId = __expectString(data.RevisionId);
    }
    if (data.Role != null) {
        contents.Role = __expectString(data.Role);
    }
    if (data.Runtime != null) {
        contents.Runtime = __expectString(data.Runtime);
    }
    if (data.RuntimeVersionConfig != null) {
        contents.RuntimeVersionConfig = de_RuntimeVersionConfig(data.RuntimeVersionConfig, context);
    }
    if (data.SigningJobArn != null) {
        contents.SigningJobArn = __expectString(data.SigningJobArn);
    }
    if (data.SigningProfileVersionArn != null) {
        contents.SigningProfileVersionArn = __expectString(data.SigningProfileVersionArn);
    }
    if (data.SnapStart != null) {
        contents.SnapStart = de_SnapStartResponse(data.SnapStart, context);
    }
    if (data.State != null) {
        contents.State = __expectString(data.State);
    }
    if (data.StateReason != null) {
        contents.StateReason = __expectString(data.StateReason);
    }
    if (data.StateReasonCode != null) {
        contents.StateReasonCode = __expectString(data.StateReasonCode);
    }
    if (data.Timeout != null) {
        contents.Timeout = __expectInt32(data.Timeout);
    }
    if (data.TracingConfig != null) {
        contents.TracingConfig = de_TracingConfigResponse(data.TracingConfig, context);
    }
    if (data.Version != null) {
        contents.Version = __expectString(data.Version);
    }
    if (data.VpcConfig != null) {
        contents.VpcConfig = de_VpcConfigResponse(data.VpcConfig, context);
    }
    return contents;
};
const de_PublishVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CodeStorageExceededException":
        case "com.amazonaws.lambda#CodeStorageExceededException":
            throw await de_CodeStorageExceededExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "PreconditionFailedException":
        case "com.amazonaws.lambda#PreconditionFailedException":
            throw await de_PreconditionFailedExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_PutFunctionCodeSigningConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutFunctionCodeSigningConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.CodeSigningConfigArn != null) {
        contents.CodeSigningConfigArn = __expectString(data.CodeSigningConfigArn);
    }
    if (data.FunctionName != null) {
        contents.FunctionName = __expectString(data.FunctionName);
    }
    return contents;
};
const de_PutFunctionCodeSigningConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CodeSigningConfigNotFoundException":
        case "com.amazonaws.lambda#CodeSigningConfigNotFoundException":
            throw await de_CodeSigningConfigNotFoundExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_PutFunctionConcurrencyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutFunctionConcurrencyCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.ReservedConcurrentExecutions != null) {
        contents.ReservedConcurrentExecutions = __expectInt32(data.ReservedConcurrentExecutions);
    }
    return contents;
};
const de_PutFunctionConcurrencyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_PutFunctionEventInvokeConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutFunctionEventInvokeConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.DestinationConfig != null) {
        contents.DestinationConfig = de_DestinationConfig(data.DestinationConfig, context);
    }
    if (data.FunctionArn != null) {
        contents.FunctionArn = __expectString(data.FunctionArn);
    }
    if (data.LastModified != null) {
        contents.LastModified = __expectNonNull(__parseEpochTimestamp(__expectNumber(data.LastModified)));
    }
    if (data.MaximumEventAgeInSeconds != null) {
        contents.MaximumEventAgeInSeconds = __expectInt32(data.MaximumEventAgeInSeconds);
    }
    if (data.MaximumRetryAttempts != null) {
        contents.MaximumRetryAttempts = __expectInt32(data.MaximumRetryAttempts);
    }
    return contents;
};
const de_PutFunctionEventInvokeConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_PutProvisionedConcurrencyConfigCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_PutProvisionedConcurrencyConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.AllocatedProvisionedConcurrentExecutions != null) {
        contents.AllocatedProvisionedConcurrentExecutions = __expectInt32(data.AllocatedProvisionedConcurrentExecutions);
    }
    if (data.AvailableProvisionedConcurrentExecutions != null) {
        contents.AvailableProvisionedConcurrentExecutions = __expectInt32(data.AvailableProvisionedConcurrentExecutions);
    }
    if (data.LastModified != null) {
        contents.LastModified = __expectString(data.LastModified);
    }
    if (data.RequestedProvisionedConcurrentExecutions != null) {
        contents.RequestedProvisionedConcurrentExecutions = __expectInt32(data.RequestedProvisionedConcurrentExecutions);
    }
    if (data.Status != null) {
        contents.Status = __expectString(data.Status);
    }
    if (data.StatusReason != null) {
        contents.StatusReason = __expectString(data.StatusReason);
    }
    return contents;
};
const de_PutProvisionedConcurrencyConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_PutRuntimeManagementConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutRuntimeManagementConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.FunctionArn != null) {
        contents.FunctionArn = __expectString(data.FunctionArn);
    }
    if (data.RuntimeVersionArn != null) {
        contents.RuntimeVersionArn = __expectString(data.RuntimeVersionArn);
    }
    if (data.UpdateRuntimeOn != null) {
        contents.UpdateRuntimeOn = __expectString(data.UpdateRuntimeOn);
    }
    return contents;
};
const de_PutRuntimeManagementConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_RemoveLayerVersionPermissionCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_RemoveLayerVersionPermissionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const de_RemoveLayerVersionPermissionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "PreconditionFailedException":
        case "com.amazonaws.lambda#PreconditionFailedException":
            throw await de_PreconditionFailedExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_RemovePermissionCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_RemovePermissionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const de_RemovePermissionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "PreconditionFailedException":
        case "com.amazonaws.lambda#PreconditionFailedException":
            throw await de_PreconditionFailedExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_TagResourceCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const de_TagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_UntagResourceCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const de_UntagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_UpdateAliasCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateAliasCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.AliasArn != null) {
        contents.AliasArn = __expectString(data.AliasArn);
    }
    if (data.Description != null) {
        contents.Description = __expectString(data.Description);
    }
    if (data.FunctionVersion != null) {
        contents.FunctionVersion = __expectString(data.FunctionVersion);
    }
    if (data.Name != null) {
        contents.Name = __expectString(data.Name);
    }
    if (data.RevisionId != null) {
        contents.RevisionId = __expectString(data.RevisionId);
    }
    if (data.RoutingConfig != null) {
        contents.RoutingConfig = de_AliasRoutingConfiguration(data.RoutingConfig, context);
    }
    return contents;
};
const de_UpdateAliasCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "PreconditionFailedException":
        case "com.amazonaws.lambda#PreconditionFailedException":
            throw await de_PreconditionFailedExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_UpdateCodeSigningConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateCodeSigningConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.CodeSigningConfig != null) {
        contents.CodeSigningConfig = de_CodeSigningConfig(data.CodeSigningConfig, context);
    }
    return contents;
};
const de_UpdateCodeSigningConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_UpdateEventSourceMappingCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_UpdateEventSourceMappingCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.AmazonManagedKafkaEventSourceConfig != null) {
        contents.AmazonManagedKafkaEventSourceConfig = de_AmazonManagedKafkaEventSourceConfig(data.AmazonManagedKafkaEventSourceConfig, context);
    }
    if (data.BatchSize != null) {
        contents.BatchSize = __expectInt32(data.BatchSize);
    }
    if (data.BisectBatchOnFunctionError != null) {
        contents.BisectBatchOnFunctionError = __expectBoolean(data.BisectBatchOnFunctionError);
    }
    if (data.DestinationConfig != null) {
        contents.DestinationConfig = de_DestinationConfig(data.DestinationConfig, context);
    }
    if (data.DocumentDBEventSourceConfig != null) {
        contents.DocumentDBEventSourceConfig = de_DocumentDBEventSourceConfig(data.DocumentDBEventSourceConfig, context);
    }
    if (data.EventSourceArn != null) {
        contents.EventSourceArn = __expectString(data.EventSourceArn);
    }
    if (data.FilterCriteria != null) {
        contents.FilterCriteria = de_FilterCriteria(data.FilterCriteria, context);
    }
    if (data.FunctionArn != null) {
        contents.FunctionArn = __expectString(data.FunctionArn);
    }
    if (data.FunctionResponseTypes != null) {
        contents.FunctionResponseTypes = de_FunctionResponseTypeList(data.FunctionResponseTypes, context);
    }
    if (data.LastModified != null) {
        contents.LastModified = __expectNonNull(__parseEpochTimestamp(__expectNumber(data.LastModified)));
    }
    if (data.LastProcessingResult != null) {
        contents.LastProcessingResult = __expectString(data.LastProcessingResult);
    }
    if (data.MaximumBatchingWindowInSeconds != null) {
        contents.MaximumBatchingWindowInSeconds = __expectInt32(data.MaximumBatchingWindowInSeconds);
    }
    if (data.MaximumRecordAgeInSeconds != null) {
        contents.MaximumRecordAgeInSeconds = __expectInt32(data.MaximumRecordAgeInSeconds);
    }
    if (data.MaximumRetryAttempts != null) {
        contents.MaximumRetryAttempts = __expectInt32(data.MaximumRetryAttempts);
    }
    if (data.ParallelizationFactor != null) {
        contents.ParallelizationFactor = __expectInt32(data.ParallelizationFactor);
    }
    if (data.Queues != null) {
        contents.Queues = de_Queues(data.Queues, context);
    }
    if (data.ScalingConfig != null) {
        contents.ScalingConfig = de_ScalingConfig(data.ScalingConfig, context);
    }
    if (data.SelfManagedEventSource != null) {
        contents.SelfManagedEventSource = de_SelfManagedEventSource(data.SelfManagedEventSource, context);
    }
    if (data.SelfManagedKafkaEventSourceConfig != null) {
        contents.SelfManagedKafkaEventSourceConfig = de_SelfManagedKafkaEventSourceConfig(data.SelfManagedKafkaEventSourceConfig, context);
    }
    if (data.SourceAccessConfigurations != null) {
        contents.SourceAccessConfigurations = de_SourceAccessConfigurations(data.SourceAccessConfigurations, context);
    }
    if (data.StartingPosition != null) {
        contents.StartingPosition = __expectString(data.StartingPosition);
    }
    if (data.StartingPositionTimestamp != null) {
        contents.StartingPositionTimestamp = __expectNonNull(__parseEpochTimestamp(__expectNumber(data.StartingPositionTimestamp)));
    }
    if (data.State != null) {
        contents.State = __expectString(data.State);
    }
    if (data.StateTransitionReason != null) {
        contents.StateTransitionReason = __expectString(data.StateTransitionReason);
    }
    if (data.Topics != null) {
        contents.Topics = de_Topics(data.Topics, context);
    }
    if (data.TumblingWindowInSeconds != null) {
        contents.TumblingWindowInSeconds = __expectInt32(data.TumblingWindowInSeconds);
    }
    if (data.UUID != null) {
        contents.UUID = __expectString(data.UUID);
    }
    return contents;
};
const de_UpdateEventSourceMappingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.lambda#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_UpdateFunctionCodeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateFunctionCodeCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.Architectures != null) {
        contents.Architectures = de_ArchitecturesList(data.Architectures, context);
    }
    if (data.CodeSha256 != null) {
        contents.CodeSha256 = __expectString(data.CodeSha256);
    }
    if (data.CodeSize != null) {
        contents.CodeSize = __expectLong(data.CodeSize);
    }
    if (data.DeadLetterConfig != null) {
        contents.DeadLetterConfig = de_DeadLetterConfig(data.DeadLetterConfig, context);
    }
    if (data.Description != null) {
        contents.Description = __expectString(data.Description);
    }
    if (data.Environment != null) {
        contents.Environment = de_EnvironmentResponse(data.Environment, context);
    }
    if (data.EphemeralStorage != null) {
        contents.EphemeralStorage = de_EphemeralStorage(data.EphemeralStorage, context);
    }
    if (data.FileSystemConfigs != null) {
        contents.FileSystemConfigs = de_FileSystemConfigList(data.FileSystemConfigs, context);
    }
    if (data.FunctionArn != null) {
        contents.FunctionArn = __expectString(data.FunctionArn);
    }
    if (data.FunctionName != null) {
        contents.FunctionName = __expectString(data.FunctionName);
    }
    if (data.Handler != null) {
        contents.Handler = __expectString(data.Handler);
    }
    if (data.ImageConfigResponse != null) {
        contents.ImageConfigResponse = de_ImageConfigResponse(data.ImageConfigResponse, context);
    }
    if (data.KMSKeyArn != null) {
        contents.KMSKeyArn = __expectString(data.KMSKeyArn);
    }
    if (data.LastModified != null) {
        contents.LastModified = __expectString(data.LastModified);
    }
    if (data.LastUpdateStatus != null) {
        contents.LastUpdateStatus = __expectString(data.LastUpdateStatus);
    }
    if (data.LastUpdateStatusReason != null) {
        contents.LastUpdateStatusReason = __expectString(data.LastUpdateStatusReason);
    }
    if (data.LastUpdateStatusReasonCode != null) {
        contents.LastUpdateStatusReasonCode = __expectString(data.LastUpdateStatusReasonCode);
    }
    if (data.Layers != null) {
        contents.Layers = de_LayersReferenceList(data.Layers, context);
    }
    if (data.MasterArn != null) {
        contents.MasterArn = __expectString(data.MasterArn);
    }
    if (data.MemorySize != null) {
        contents.MemorySize = __expectInt32(data.MemorySize);
    }
    if (data.PackageType != null) {
        contents.PackageType = __expectString(data.PackageType);
    }
    if (data.RevisionId != null) {
        contents.RevisionId = __expectString(data.RevisionId);
    }
    if (data.Role != null) {
        contents.Role = __expectString(data.Role);
    }
    if (data.Runtime != null) {
        contents.Runtime = __expectString(data.Runtime);
    }
    if (data.RuntimeVersionConfig != null) {
        contents.RuntimeVersionConfig = de_RuntimeVersionConfig(data.RuntimeVersionConfig, context);
    }
    if (data.SigningJobArn != null) {
        contents.SigningJobArn = __expectString(data.SigningJobArn);
    }
    if (data.SigningProfileVersionArn != null) {
        contents.SigningProfileVersionArn = __expectString(data.SigningProfileVersionArn);
    }
    if (data.SnapStart != null) {
        contents.SnapStart = de_SnapStartResponse(data.SnapStart, context);
    }
    if (data.State != null) {
        contents.State = __expectString(data.State);
    }
    if (data.StateReason != null) {
        contents.StateReason = __expectString(data.StateReason);
    }
    if (data.StateReasonCode != null) {
        contents.StateReasonCode = __expectString(data.StateReasonCode);
    }
    if (data.Timeout != null) {
        contents.Timeout = __expectInt32(data.Timeout);
    }
    if (data.TracingConfig != null) {
        contents.TracingConfig = de_TracingConfigResponse(data.TracingConfig, context);
    }
    if (data.Version != null) {
        contents.Version = __expectString(data.Version);
    }
    if (data.VpcConfig != null) {
        contents.VpcConfig = de_VpcConfigResponse(data.VpcConfig, context);
    }
    return contents;
};
const de_UpdateFunctionCodeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CodeSigningConfigNotFoundException":
        case "com.amazonaws.lambda#CodeSigningConfigNotFoundException":
            throw await de_CodeSigningConfigNotFoundExceptionRes(parsedOutput, context);
        case "CodeStorageExceededException":
        case "com.amazonaws.lambda#CodeStorageExceededException":
            throw await de_CodeStorageExceededExceptionRes(parsedOutput, context);
        case "CodeVerificationFailedException":
        case "com.amazonaws.lambda#CodeVerificationFailedException":
            throw await de_CodeVerificationFailedExceptionRes(parsedOutput, context);
        case "InvalidCodeSignatureException":
        case "com.amazonaws.lambda#InvalidCodeSignatureException":
            throw await de_InvalidCodeSignatureExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "PreconditionFailedException":
        case "com.amazonaws.lambda#PreconditionFailedException":
            throw await de_PreconditionFailedExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_UpdateFunctionConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateFunctionConfigurationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.Architectures != null) {
        contents.Architectures = de_ArchitecturesList(data.Architectures, context);
    }
    if (data.CodeSha256 != null) {
        contents.CodeSha256 = __expectString(data.CodeSha256);
    }
    if (data.CodeSize != null) {
        contents.CodeSize = __expectLong(data.CodeSize);
    }
    if (data.DeadLetterConfig != null) {
        contents.DeadLetterConfig = de_DeadLetterConfig(data.DeadLetterConfig, context);
    }
    if (data.Description != null) {
        contents.Description = __expectString(data.Description);
    }
    if (data.Environment != null) {
        contents.Environment = de_EnvironmentResponse(data.Environment, context);
    }
    if (data.EphemeralStorage != null) {
        contents.EphemeralStorage = de_EphemeralStorage(data.EphemeralStorage, context);
    }
    if (data.FileSystemConfigs != null) {
        contents.FileSystemConfigs = de_FileSystemConfigList(data.FileSystemConfigs, context);
    }
    if (data.FunctionArn != null) {
        contents.FunctionArn = __expectString(data.FunctionArn);
    }
    if (data.FunctionName != null) {
        contents.FunctionName = __expectString(data.FunctionName);
    }
    if (data.Handler != null) {
        contents.Handler = __expectString(data.Handler);
    }
    if (data.ImageConfigResponse != null) {
        contents.ImageConfigResponse = de_ImageConfigResponse(data.ImageConfigResponse, context);
    }
    if (data.KMSKeyArn != null) {
        contents.KMSKeyArn = __expectString(data.KMSKeyArn);
    }
    if (data.LastModified != null) {
        contents.LastModified = __expectString(data.LastModified);
    }
    if (data.LastUpdateStatus != null) {
        contents.LastUpdateStatus = __expectString(data.LastUpdateStatus);
    }
    if (data.LastUpdateStatusReason != null) {
        contents.LastUpdateStatusReason = __expectString(data.LastUpdateStatusReason);
    }
    if (data.LastUpdateStatusReasonCode != null) {
        contents.LastUpdateStatusReasonCode = __expectString(data.LastUpdateStatusReasonCode);
    }
    if (data.Layers != null) {
        contents.Layers = de_LayersReferenceList(data.Layers, context);
    }
    if (data.MasterArn != null) {
        contents.MasterArn = __expectString(data.MasterArn);
    }
    if (data.MemorySize != null) {
        contents.MemorySize = __expectInt32(data.MemorySize);
    }
    if (data.PackageType != null) {
        contents.PackageType = __expectString(data.PackageType);
    }
    if (data.RevisionId != null) {
        contents.RevisionId = __expectString(data.RevisionId);
    }
    if (data.Role != null) {
        contents.Role = __expectString(data.Role);
    }
    if (data.Runtime != null) {
        contents.Runtime = __expectString(data.Runtime);
    }
    if (data.RuntimeVersionConfig != null) {
        contents.RuntimeVersionConfig = de_RuntimeVersionConfig(data.RuntimeVersionConfig, context);
    }
    if (data.SigningJobArn != null) {
        contents.SigningJobArn = __expectString(data.SigningJobArn);
    }
    if (data.SigningProfileVersionArn != null) {
        contents.SigningProfileVersionArn = __expectString(data.SigningProfileVersionArn);
    }
    if (data.SnapStart != null) {
        contents.SnapStart = de_SnapStartResponse(data.SnapStart, context);
    }
    if (data.State != null) {
        contents.State = __expectString(data.State);
    }
    if (data.StateReason != null) {
        contents.StateReason = __expectString(data.StateReason);
    }
    if (data.StateReasonCode != null) {
        contents.StateReasonCode = __expectString(data.StateReasonCode);
    }
    if (data.Timeout != null) {
        contents.Timeout = __expectInt32(data.Timeout);
    }
    if (data.TracingConfig != null) {
        contents.TracingConfig = de_TracingConfigResponse(data.TracingConfig, context);
    }
    if (data.Version != null) {
        contents.Version = __expectString(data.Version);
    }
    if (data.VpcConfig != null) {
        contents.VpcConfig = de_VpcConfigResponse(data.VpcConfig, context);
    }
    return contents;
};
const de_UpdateFunctionConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CodeSigningConfigNotFoundException":
        case "com.amazonaws.lambda#CodeSigningConfigNotFoundException":
            throw await de_CodeSigningConfigNotFoundExceptionRes(parsedOutput, context);
        case "CodeVerificationFailedException":
        case "com.amazonaws.lambda#CodeVerificationFailedException":
            throw await de_CodeVerificationFailedExceptionRes(parsedOutput, context);
        case "InvalidCodeSignatureException":
        case "com.amazonaws.lambda#InvalidCodeSignatureException":
            throw await de_InvalidCodeSignatureExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "PreconditionFailedException":
        case "com.amazonaws.lambda#PreconditionFailedException":
            throw await de_PreconditionFailedExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_UpdateFunctionEventInvokeConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateFunctionEventInvokeConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.DestinationConfig != null) {
        contents.DestinationConfig = de_DestinationConfig(data.DestinationConfig, context);
    }
    if (data.FunctionArn != null) {
        contents.FunctionArn = __expectString(data.FunctionArn);
    }
    if (data.LastModified != null) {
        contents.LastModified = __expectNonNull(__parseEpochTimestamp(__expectNumber(data.LastModified)));
    }
    if (data.MaximumEventAgeInSeconds != null) {
        contents.MaximumEventAgeInSeconds = __expectInt32(data.MaximumEventAgeInSeconds);
    }
    if (data.MaximumRetryAttempts != null) {
        contents.MaximumRetryAttempts = __expectInt32(data.MaximumRetryAttempts);
    }
    return contents;
};
const de_UpdateFunctionEventInvokeConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_UpdateFunctionUrlConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateFunctionUrlConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    if (data.AuthType != null) {
        contents.AuthType = __expectString(data.AuthType);
    }
    if (data.Cors != null) {
        contents.Cors = de_Cors(data.Cors, context);
    }
    if (data.CreationTime != null) {
        contents.CreationTime = __expectString(data.CreationTime);
    }
    if (data.FunctionArn != null) {
        contents.FunctionArn = __expectString(data.FunctionArn);
    }
    if (data.FunctionUrl != null) {
        contents.FunctionUrl = __expectString(data.FunctionUrl);
    }
    if (data.InvokeMode != null) {
        contents.InvokeMode = __expectString(data.InvokeMode);
    }
    if (data.LastModifiedTime != null) {
        contents.LastModifiedTime = __expectString(data.LastModifiedTime);
    }
    return contents;
};
const de_UpdateFunctionUrlConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
const map = __map;
const de_CodeSigningConfigNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = __expectString(data.Message);
    }
    if (data.Type != null) {
        contents.Type = __expectString(data.Type);
    }
    const exception = new CodeSigningConfigNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_CodeStorageExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Type != null) {
        contents.Type = __expectString(data.Type);
    }
    if (data.message != null) {
        contents.message = __expectString(data.message);
    }
    const exception = new CodeStorageExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_CodeVerificationFailedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = __expectString(data.Message);
    }
    if (data.Type != null) {
        contents.Type = __expectString(data.Type);
    }
    const exception = new CodeVerificationFailedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_EC2AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = __expectString(data.Message);
    }
    if (data.Type != null) {
        contents.Type = __expectString(data.Type);
    }
    const exception = new EC2AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_EC2ThrottledExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = __expectString(data.Message);
    }
    if (data.Type != null) {
        contents.Type = __expectString(data.Type);
    }
    const exception = new EC2ThrottledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_EC2UnexpectedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.EC2ErrorCode != null) {
        contents.EC2ErrorCode = __expectString(data.EC2ErrorCode);
    }
    if (data.Message != null) {
        contents.Message = __expectString(data.Message);
    }
    if (data.Type != null) {
        contents.Type = __expectString(data.Type);
    }
    const exception = new EC2UnexpectedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_EFSIOExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = __expectString(data.Message);
    }
    if (data.Type != null) {
        contents.Type = __expectString(data.Type);
    }
    const exception = new EFSIOException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_EFSMountConnectivityExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = __expectString(data.Message);
    }
    if (data.Type != null) {
        contents.Type = __expectString(data.Type);
    }
    const exception = new EFSMountConnectivityException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_EFSMountFailureExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = __expectString(data.Message);
    }
    if (data.Type != null) {
        contents.Type = __expectString(data.Type);
    }
    const exception = new EFSMountFailureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_EFSMountTimeoutExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = __expectString(data.Message);
    }
    if (data.Type != null) {
        contents.Type = __expectString(data.Type);
    }
    const exception = new EFSMountTimeoutException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ENILimitReachedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = __expectString(data.Message);
    }
    if (data.Type != null) {
        contents.Type = __expectString(data.Type);
    }
    const exception = new ENILimitReachedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidCodeSignatureExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = __expectString(data.Message);
    }
    if (data.Type != null) {
        contents.Type = __expectString(data.Type);
    }
    const exception = new InvalidCodeSignatureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidParameterValueExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Type != null) {
        contents.Type = __expectString(data.Type);
    }
    if (data.message != null) {
        contents.message = __expectString(data.message);
    }
    const exception = new InvalidParameterValueException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidRequestContentExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Type != null) {
        contents.Type = __expectString(data.Type);
    }
    if (data.message != null) {
        contents.message = __expectString(data.message);
    }
    const exception = new InvalidRequestContentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidRuntimeExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = __expectString(data.Message);
    }
    if (data.Type != null) {
        contents.Type = __expectString(data.Type);
    }
    const exception = new InvalidRuntimeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidSecurityGroupIDExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = __expectString(data.Message);
    }
    if (data.Type != null) {
        contents.Type = __expectString(data.Type);
    }
    const exception = new InvalidSecurityGroupIDException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidSubnetIDExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = __expectString(data.Message);
    }
    if (data.Type != null) {
        contents.Type = __expectString(data.Type);
    }
    const exception = new InvalidSubnetIDException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidZipFileExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = __expectString(data.Message);
    }
    if (data.Type != null) {
        contents.Type = __expectString(data.Type);
    }
    const exception = new InvalidZipFileException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_KMSAccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = __expectString(data.Message);
    }
    if (data.Type != null) {
        contents.Type = __expectString(data.Type);
    }
    const exception = new KMSAccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_KMSDisabledExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = __expectString(data.Message);
    }
    if (data.Type != null) {
        contents.Type = __expectString(data.Type);
    }
    const exception = new KMSDisabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_KMSInvalidStateExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = __expectString(data.Message);
    }
    if (data.Type != null) {
        contents.Type = __expectString(data.Type);
    }
    const exception = new KMSInvalidStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_KMSNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = __expectString(data.Message);
    }
    if (data.Type != null) {
        contents.Type = __expectString(data.Type);
    }
    const exception = new KMSNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_PolicyLengthExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Type != null) {
        contents.Type = __expectString(data.Type);
    }
    if (data.message != null) {
        contents.message = __expectString(data.message);
    }
    const exception = new PolicyLengthExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_PreconditionFailedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Type != null) {
        contents.Type = __expectString(data.Type);
    }
    if (data.message != null) {
        contents.message = __expectString(data.message);
    }
    const exception = new PreconditionFailedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ProvisionedConcurrencyConfigNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Type != null) {
        contents.Type = __expectString(data.Type);
    }
    if (data.message != null) {
        contents.message = __expectString(data.message);
    }
    const exception = new ProvisionedConcurrencyConfigNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_RequestTooLargeExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Type != null) {
        contents.Type = __expectString(data.Type);
    }
    if (data.message != null) {
        contents.message = __expectString(data.message);
    }
    const exception = new RequestTooLargeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Type != null) {
        contents.Type = __expectString(data.Type);
    }
    if (data.message != null) {
        contents.message = __expectString(data.message);
    }
    const exception = new ResourceConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceInUseExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = __expectString(data.Message);
    }
    if (data.Type != null) {
        contents.Type = __expectString(data.Type);
    }
    const exception = new ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = __expectString(data.Message);
    }
    if (data.Type != null) {
        contents.Type = __expectString(data.Type);
    }
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotReadyExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Type != null) {
        contents.Type = __expectString(data.Type);
    }
    if (data.message != null) {
        contents.message = __expectString(data.message);
    }
    const exception = new ResourceNotReadyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = __expectString(data.Message);
    }
    if (data.Type != null) {
        contents.Type = __expectString(data.Type);
    }
    const exception = new ServiceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_SnapStartExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = __expectString(data.Message);
    }
    if (data.Type != null) {
        contents.Type = __expectString(data.Type);
    }
    const exception = new SnapStartException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_SnapStartNotReadyExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = __expectString(data.Message);
    }
    if (data.Type != null) {
        contents.Type = __expectString(data.Type);
    }
    const exception = new SnapStartNotReadyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_SnapStartTimeoutExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = __expectString(data.Message);
    }
    if (data.Type != null) {
        contents.Type = __expectString(data.Type);
    }
    const exception = new SnapStartTimeoutException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_SubnetIPAddressLimitReachedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = __expectString(data.Message);
    }
    if (data.Type != null) {
        contents.Type = __expectString(data.Type);
    }
    const exception = new SubnetIPAddressLimitReachedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_TooManyRequestsExceptionRes = async (parsedOutput, context) => {
    const contents = map({
        retryAfterSeconds: [, parsedOutput.headers["retry-after"]],
    });
    const data = parsedOutput.body;
    if (data.Reason != null) {
        contents.Reason = __expectString(data.Reason);
    }
    if (data.Type != null) {
        contents.Type = __expectString(data.Type);
    }
    if (data.message != null) {
        contents.message = __expectString(data.message);
    }
    const exception = new TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_UnsupportedMediaTypeExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Type != null) {
        contents.Type = __expectString(data.Type);
    }
    if (data.message != null) {
        contents.message = __expectString(data.message);
    }
    const exception = new UnsupportedMediaTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvokeWithResponseStreamResponseEvent = (output, context) => {
    return context.eventStreamMarshaller.deserialize(output, async (event) => {
        if (event["PayloadChunk"] != null) {
            return {
                PayloadChunk: await de_InvokeResponseStreamUpdate_event(event["PayloadChunk"], context),
            };
        }
        if (event["InvokeComplete"] != null) {
            return {
                InvokeComplete: await de_InvokeWithResponseStreamCompleteEvent_event(event["InvokeComplete"], context),
            };
        }
        return { $unknown: output };
    });
};
const de_InvokeResponseStreamUpdate_event = async (output, context) => {
    const contents = {};
    contents.Payload = output.body;
    return contents;
};
const de_InvokeWithResponseStreamCompleteEvent_event = async (output, context) => {
    const contents = {};
    const data = await parseBody(output.body, context);
    Object.assign(contents, de_InvokeWithResponseStreamCompleteEvent(data, context));
    return contents;
};
const se_AdditionalVersionWeights = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = __serializeFloat(value);
        return acc;
    }, {});
};
const se_AliasRoutingConfiguration = (input, context) => {
    return {
        ...(input.AdditionalVersionWeights != null && {
            AdditionalVersionWeights: se_AdditionalVersionWeights(input.AdditionalVersionWeights, context),
        }),
    };
};
const se_AllowedPublishers = (input, context) => {
    return {
        ...(input.SigningProfileVersionArns != null && {
            SigningProfileVersionArns: se_SigningProfileVersionArns(input.SigningProfileVersionArns, context),
        }),
    };
};
const se_AllowMethodsList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_AllowOriginsList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_AmazonManagedKafkaEventSourceConfig = (input, context) => {
    return {
        ...(input.ConsumerGroupId != null && { ConsumerGroupId: input.ConsumerGroupId }),
    };
};
const se_ArchitecturesList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_CodeSigningPolicies = (input, context) => {
    return {
        ...(input.UntrustedArtifactOnDeployment != null && {
            UntrustedArtifactOnDeployment: input.UntrustedArtifactOnDeployment,
        }),
    };
};
const se_CompatibleArchitectures = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_CompatibleRuntimes = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_Cors = (input, context) => {
    return {
        ...(input.AllowCredentials != null && { AllowCredentials: input.AllowCredentials }),
        ...(input.AllowHeaders != null && { AllowHeaders: se_HeadersList(input.AllowHeaders, context) }),
        ...(input.AllowMethods != null && { AllowMethods: se_AllowMethodsList(input.AllowMethods, context) }),
        ...(input.AllowOrigins != null && { AllowOrigins: se_AllowOriginsList(input.AllowOrigins, context) }),
        ...(input.ExposeHeaders != null && { ExposeHeaders: se_HeadersList(input.ExposeHeaders, context) }),
        ...(input.MaxAge != null && { MaxAge: input.MaxAge }),
    };
};
const se_DeadLetterConfig = (input, context) => {
    return {
        ...(input.TargetArn != null && { TargetArn: input.TargetArn }),
    };
};
const se_DestinationConfig = (input, context) => {
    return {
        ...(input.OnFailure != null && { OnFailure: se_OnFailure(input.OnFailure, context) }),
        ...(input.OnSuccess != null && { OnSuccess: se_OnSuccess(input.OnSuccess, context) }),
    };
};
const se_DocumentDBEventSourceConfig = (input, context) => {
    return {
        ...(input.CollectionName != null && { CollectionName: input.CollectionName }),
        ...(input.DatabaseName != null && { DatabaseName: input.DatabaseName }),
        ...(input.FullDocument != null && { FullDocument: input.FullDocument }),
    };
};
const se_EndpointLists = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_Endpoints = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_EndpointLists(value, context);
        return acc;
    }, {});
};
const se_Environment = (input, context) => {
    return {
        ...(input.Variables != null && { Variables: se_EnvironmentVariables(input.Variables, context) }),
    };
};
const se_EnvironmentVariables = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = value;
        return acc;
    }, {});
};
const se_EphemeralStorage = (input, context) => {
    return {
        ...(input.Size != null && { Size: input.Size }),
    };
};
const se_FileSystemConfig = (input, context) => {
    return {
        ...(input.Arn != null && { Arn: input.Arn }),
        ...(input.LocalMountPath != null && { LocalMountPath: input.LocalMountPath }),
    };
};
const se_FileSystemConfigList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_FileSystemConfig(entry, context);
    });
};
const se_Filter = (input, context) => {
    return {
        ...(input.Pattern != null && { Pattern: input.Pattern }),
    };
};
const se_FilterCriteria = (input, context) => {
    return {
        ...(input.Filters != null && { Filters: se_FilterList(input.Filters, context) }),
    };
};
const se_FilterList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Filter(entry, context);
    });
};
const se_FunctionCode = (input, context) => {
    return {
        ...(input.ImageUri != null && { ImageUri: input.ImageUri }),
        ...(input.S3Bucket != null && { S3Bucket: input.S3Bucket }),
        ...(input.S3Key != null && { S3Key: input.S3Key }),
        ...(input.S3ObjectVersion != null && { S3ObjectVersion: input.S3ObjectVersion }),
        ...(input.ZipFile != null && { ZipFile: context.base64Encoder(input.ZipFile) }),
    };
};
const se_FunctionResponseTypeList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_HeadersList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_ImageConfig = (input, context) => {
    return {
        ...(input.Command != null && { Command: se_StringList(input.Command, context) }),
        ...(input.EntryPoint != null && { EntryPoint: se_StringList(input.EntryPoint, context) }),
        ...(input.WorkingDirectory != null && { WorkingDirectory: input.WorkingDirectory }),
    };
};
const se_LayerList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_LayerVersionContentInput = (input, context) => {
    return {
        ...(input.S3Bucket != null && { S3Bucket: input.S3Bucket }),
        ...(input.S3Key != null && { S3Key: input.S3Key }),
        ...(input.S3ObjectVersion != null && { S3ObjectVersion: input.S3ObjectVersion }),
        ...(input.ZipFile != null && { ZipFile: context.base64Encoder(input.ZipFile) }),
    };
};
const se_OnFailure = (input, context) => {
    return {
        ...(input.Destination != null && { Destination: input.Destination }),
    };
};
const se_OnSuccess = (input, context) => {
    return {
        ...(input.Destination != null && { Destination: input.Destination }),
    };
};
const se_Queues = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_ScalingConfig = (input, context) => {
    return {
        ...(input.MaximumConcurrency != null && { MaximumConcurrency: input.MaximumConcurrency }),
    };
};
const se_SecurityGroupIds = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_SelfManagedEventSource = (input, context) => {
    return {
        ...(input.Endpoints != null && { Endpoints: se_Endpoints(input.Endpoints, context) }),
    };
};
const se_SelfManagedKafkaEventSourceConfig = (input, context) => {
    return {
        ...(input.ConsumerGroupId != null && { ConsumerGroupId: input.ConsumerGroupId }),
    };
};
const se_SigningProfileVersionArns = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_SnapStart = (input, context) => {
    return {
        ...(input.ApplyOn != null && { ApplyOn: input.ApplyOn }),
    };
};
const se_SourceAccessConfiguration = (input, context) => {
    return {
        ...(input.Type != null && { Type: input.Type }),
        ...(input.URI != null && { URI: input.URI }),
    };
};
const se_SourceAccessConfigurations = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_SourceAccessConfiguration(entry, context);
    });
};
const se_StringList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_SubnetIds = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_Tags = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = value;
        return acc;
    }, {});
};
const se_Topics = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_TracingConfig = (input, context) => {
    return {
        ...(input.Mode != null && { Mode: input.Mode }),
    };
};
const se_VpcConfig = (input, context) => {
    return {
        ...(input.SecurityGroupIds != null && { SecurityGroupIds: se_SecurityGroupIds(input.SecurityGroupIds, context) }),
        ...(input.SubnetIds != null && { SubnetIds: se_SubnetIds(input.SubnetIds, context) }),
    };
};
const de_AccountLimit = (output, context) => {
    return {
        CodeSizeUnzipped: __expectLong(output.CodeSizeUnzipped),
        CodeSizeZipped: __expectLong(output.CodeSizeZipped),
        ConcurrentExecutions: __expectInt32(output.ConcurrentExecutions),
        TotalCodeSize: __expectLong(output.TotalCodeSize),
        UnreservedConcurrentExecutions: __expectInt32(output.UnreservedConcurrentExecutions),
    };
};
const de_AccountUsage = (output, context) => {
    return {
        FunctionCount: __expectLong(output.FunctionCount),
        TotalCodeSize: __expectLong(output.TotalCodeSize),
    };
};
const de_AdditionalVersionWeights = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = __limitedParseDouble(value);
        return acc;
    }, {});
};
const de_AliasConfiguration = (output, context) => {
    return {
        AliasArn: __expectString(output.AliasArn),
        Description: __expectString(output.Description),
        FunctionVersion: __expectString(output.FunctionVersion),
        Name: __expectString(output.Name),
        RevisionId: __expectString(output.RevisionId),
        RoutingConfig: output.RoutingConfig != null ? de_AliasRoutingConfiguration(output.RoutingConfig, context) : undefined,
    };
};
const de_AliasList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_AliasConfiguration(entry, context);
    });
    return retVal;
};
const de_AliasRoutingConfiguration = (output, context) => {
    return {
        AdditionalVersionWeights: output.AdditionalVersionWeights != null
            ? de_AdditionalVersionWeights(output.AdditionalVersionWeights, context)
            : undefined,
    };
};
const de_AllowedPublishers = (output, context) => {
    return {
        SigningProfileVersionArns: output.SigningProfileVersionArns != null
            ? de_SigningProfileVersionArns(output.SigningProfileVersionArns, context)
            : undefined,
    };
};
const de_AllowMethodsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const de_AllowOriginsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const de_AmazonManagedKafkaEventSourceConfig = (output, context) => {
    return {
        ConsumerGroupId: __expectString(output.ConsumerGroupId),
    };
};
const de_ArchitecturesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const de_CodeSigningConfig = (output, context) => {
    return {
        AllowedPublishers: output.AllowedPublishers != null ? de_AllowedPublishers(output.AllowedPublishers, context) : undefined,
        CodeSigningConfigArn: __expectString(output.CodeSigningConfigArn),
        CodeSigningConfigId: __expectString(output.CodeSigningConfigId),
        CodeSigningPolicies: output.CodeSigningPolicies != null ? de_CodeSigningPolicies(output.CodeSigningPolicies, context) : undefined,
        Description: __expectString(output.Description),
        LastModified: __expectString(output.LastModified),
    };
};
const de_CodeSigningConfigList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_CodeSigningConfig(entry, context);
    });
    return retVal;
};
const de_CodeSigningPolicies = (output, context) => {
    return {
        UntrustedArtifactOnDeployment: __expectString(output.UntrustedArtifactOnDeployment),
    };
};
const de_CompatibleArchitectures = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const de_CompatibleRuntimes = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const de_Concurrency = (output, context) => {
    return {
        ReservedConcurrentExecutions: __expectInt32(output.ReservedConcurrentExecutions),
    };
};
const de_Cors = (output, context) => {
    return {
        AllowCredentials: __expectBoolean(output.AllowCredentials),
        AllowHeaders: output.AllowHeaders != null ? de_HeadersList(output.AllowHeaders, context) : undefined,
        AllowMethods: output.AllowMethods != null ? de_AllowMethodsList(output.AllowMethods, context) : undefined,
        AllowOrigins: output.AllowOrigins != null ? de_AllowOriginsList(output.AllowOrigins, context) : undefined,
        ExposeHeaders: output.ExposeHeaders != null ? de_HeadersList(output.ExposeHeaders, context) : undefined,
        MaxAge: __expectInt32(output.MaxAge),
    };
};
const de_DeadLetterConfig = (output, context) => {
    return {
        TargetArn: __expectString(output.TargetArn),
    };
};
const de_DestinationConfig = (output, context) => {
    return {
        OnFailure: output.OnFailure != null ? de_OnFailure(output.OnFailure, context) : undefined,
        OnSuccess: output.OnSuccess != null ? de_OnSuccess(output.OnSuccess, context) : undefined,
    };
};
const de_DocumentDBEventSourceConfig = (output, context) => {
    return {
        CollectionName: __expectString(output.CollectionName),
        DatabaseName: __expectString(output.DatabaseName),
        FullDocument: __expectString(output.FullDocument),
    };
};
const de_EndpointLists = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const de_Endpoints = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_EndpointLists(value, context);
        return acc;
    }, {});
};
const de_EnvironmentError = (output, context) => {
    return {
        ErrorCode: __expectString(output.ErrorCode),
        Message: __expectString(output.Message),
    };
};
const de_EnvironmentResponse = (output, context) => {
    return {
        Error: output.Error != null ? de_EnvironmentError(output.Error, context) : undefined,
        Variables: output.Variables != null ? de_EnvironmentVariables(output.Variables, context) : undefined,
    };
};
const de_EnvironmentVariables = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = __expectString(value);
        return acc;
    }, {});
};
const de_EphemeralStorage = (output, context) => {
    return {
        Size: __expectInt32(output.Size),
    };
};
const de_EventSourceMappingConfiguration = (output, context) => {
    return {
        AmazonManagedKafkaEventSourceConfig: output.AmazonManagedKafkaEventSourceConfig != null
            ? de_AmazonManagedKafkaEventSourceConfig(output.AmazonManagedKafkaEventSourceConfig, context)
            : undefined,
        BatchSize: __expectInt32(output.BatchSize),
        BisectBatchOnFunctionError: __expectBoolean(output.BisectBatchOnFunctionError),
        DestinationConfig: output.DestinationConfig != null ? de_DestinationConfig(output.DestinationConfig, context) : undefined,
        DocumentDBEventSourceConfig: output.DocumentDBEventSourceConfig != null
            ? de_DocumentDBEventSourceConfig(output.DocumentDBEventSourceConfig, context)
            : undefined,
        EventSourceArn: __expectString(output.EventSourceArn),
        FilterCriteria: output.FilterCriteria != null ? de_FilterCriteria(output.FilterCriteria, context) : undefined,
        FunctionArn: __expectString(output.FunctionArn),
        FunctionResponseTypes: output.FunctionResponseTypes != null
            ? de_FunctionResponseTypeList(output.FunctionResponseTypes, context)
            : undefined,
        LastModified: output.LastModified != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastModified)))
            : undefined,
        LastProcessingResult: __expectString(output.LastProcessingResult),
        MaximumBatchingWindowInSeconds: __expectInt32(output.MaximumBatchingWindowInSeconds),
        MaximumRecordAgeInSeconds: __expectInt32(output.MaximumRecordAgeInSeconds),
        MaximumRetryAttempts: __expectInt32(output.MaximumRetryAttempts),
        ParallelizationFactor: __expectInt32(output.ParallelizationFactor),
        Queues: output.Queues != null ? de_Queues(output.Queues, context) : undefined,
        ScalingConfig: output.ScalingConfig != null ? de_ScalingConfig(output.ScalingConfig, context) : undefined,
        SelfManagedEventSource: output.SelfManagedEventSource != null
            ? de_SelfManagedEventSource(output.SelfManagedEventSource, context)
            : undefined,
        SelfManagedKafkaEventSourceConfig: output.SelfManagedKafkaEventSourceConfig != null
            ? de_SelfManagedKafkaEventSourceConfig(output.SelfManagedKafkaEventSourceConfig, context)
            : undefined,
        SourceAccessConfigurations: output.SourceAccessConfigurations != null
            ? de_SourceAccessConfigurations(output.SourceAccessConfigurations, context)
            : undefined,
        StartingPosition: __expectString(output.StartingPosition),
        StartingPositionTimestamp: output.StartingPositionTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.StartingPositionTimestamp)))
            : undefined,
        State: __expectString(output.State),
        StateTransitionReason: __expectString(output.StateTransitionReason),
        Topics: output.Topics != null ? de_Topics(output.Topics, context) : undefined,
        TumblingWindowInSeconds: __expectInt32(output.TumblingWindowInSeconds),
        UUID: __expectString(output.UUID),
    };
};
const de_EventSourceMappingsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_EventSourceMappingConfiguration(entry, context);
    });
    return retVal;
};
const de_FileSystemConfig = (output, context) => {
    return {
        Arn: __expectString(output.Arn),
        LocalMountPath: __expectString(output.LocalMountPath),
    };
};
const de_FileSystemConfigList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_FileSystemConfig(entry, context);
    });
    return retVal;
};
const de_Filter = (output, context) => {
    return {
        Pattern: __expectString(output.Pattern),
    };
};
const de_FilterCriteria = (output, context) => {
    return {
        Filters: output.Filters != null ? de_FilterList(output.Filters, context) : undefined,
    };
};
const de_FilterList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_Filter(entry, context);
    });
    return retVal;
};
const de_FunctionArnList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const de_FunctionCodeLocation = (output, context) => {
    return {
        ImageUri: __expectString(output.ImageUri),
        Location: __expectString(output.Location),
        RepositoryType: __expectString(output.RepositoryType),
        ResolvedImageUri: __expectString(output.ResolvedImageUri),
    };
};
const de_FunctionConfiguration = (output, context) => {
    return {
        Architectures: output.Architectures != null ? de_ArchitecturesList(output.Architectures, context) : undefined,
        CodeSha256: __expectString(output.CodeSha256),
        CodeSize: __expectLong(output.CodeSize),
        DeadLetterConfig: output.DeadLetterConfig != null ? de_DeadLetterConfig(output.DeadLetterConfig, context) : undefined,
        Description: __expectString(output.Description),
        Environment: output.Environment != null ? de_EnvironmentResponse(output.Environment, context) : undefined,
        EphemeralStorage: output.EphemeralStorage != null ? de_EphemeralStorage(output.EphemeralStorage, context) : undefined,
        FileSystemConfigs: output.FileSystemConfigs != null ? de_FileSystemConfigList(output.FileSystemConfigs, context) : undefined,
        FunctionArn: __expectString(output.FunctionArn),
        FunctionName: __expectString(output.FunctionName),
        Handler: __expectString(output.Handler),
        ImageConfigResponse: output.ImageConfigResponse != null ? de_ImageConfigResponse(output.ImageConfigResponse, context) : undefined,
        KMSKeyArn: __expectString(output.KMSKeyArn),
        LastModified: __expectString(output.LastModified),
        LastUpdateStatus: __expectString(output.LastUpdateStatus),
        LastUpdateStatusReason: __expectString(output.LastUpdateStatusReason),
        LastUpdateStatusReasonCode: __expectString(output.LastUpdateStatusReasonCode),
        Layers: output.Layers != null ? de_LayersReferenceList(output.Layers, context) : undefined,
        MasterArn: __expectString(output.MasterArn),
        MemorySize: __expectInt32(output.MemorySize),
        PackageType: __expectString(output.PackageType),
        RevisionId: __expectString(output.RevisionId),
        Role: __expectString(output.Role),
        Runtime: __expectString(output.Runtime),
        RuntimeVersionConfig: output.RuntimeVersionConfig != null ? de_RuntimeVersionConfig(output.RuntimeVersionConfig, context) : undefined,
        SigningJobArn: __expectString(output.SigningJobArn),
        SigningProfileVersionArn: __expectString(output.SigningProfileVersionArn),
        SnapStart: output.SnapStart != null ? de_SnapStartResponse(output.SnapStart, context) : undefined,
        State: __expectString(output.State),
        StateReason: __expectString(output.StateReason),
        StateReasonCode: __expectString(output.StateReasonCode),
        Timeout: __expectInt32(output.Timeout),
        TracingConfig: output.TracingConfig != null ? de_TracingConfigResponse(output.TracingConfig, context) : undefined,
        Version: __expectString(output.Version),
        VpcConfig: output.VpcConfig != null ? de_VpcConfigResponse(output.VpcConfig, context) : undefined,
    };
};
const de_FunctionEventInvokeConfig = (output, context) => {
    return {
        DestinationConfig: output.DestinationConfig != null ? de_DestinationConfig(output.DestinationConfig, context) : undefined,
        FunctionArn: __expectString(output.FunctionArn),
        LastModified: output.LastModified != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastModified)))
            : undefined,
        MaximumEventAgeInSeconds: __expectInt32(output.MaximumEventAgeInSeconds),
        MaximumRetryAttempts: __expectInt32(output.MaximumRetryAttempts),
    };
};
const de_FunctionEventInvokeConfigList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_FunctionEventInvokeConfig(entry, context);
    });
    return retVal;
};
const de_FunctionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_FunctionConfiguration(entry, context);
    });
    return retVal;
};
const de_FunctionResponseTypeList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const de_FunctionUrlConfig = (output, context) => {
    return {
        AuthType: __expectString(output.AuthType),
        Cors: output.Cors != null ? de_Cors(output.Cors, context) : undefined,
        CreationTime: __expectString(output.CreationTime),
        FunctionArn: __expectString(output.FunctionArn),
        FunctionUrl: __expectString(output.FunctionUrl),
        InvokeMode: __expectString(output.InvokeMode),
        LastModifiedTime: __expectString(output.LastModifiedTime),
    };
};
const de_FunctionUrlConfigList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_FunctionUrlConfig(entry, context);
    });
    return retVal;
};
const de_HeadersList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const de_ImageConfig = (output, context) => {
    return {
        Command: output.Command != null ? de_StringList(output.Command, context) : undefined,
        EntryPoint: output.EntryPoint != null ? de_StringList(output.EntryPoint, context) : undefined,
        WorkingDirectory: __expectString(output.WorkingDirectory),
    };
};
const de_ImageConfigError = (output, context) => {
    return {
        ErrorCode: __expectString(output.ErrorCode),
        Message: __expectString(output.Message),
    };
};
const de_ImageConfigResponse = (output, context) => {
    return {
        Error: output.Error != null ? de_ImageConfigError(output.Error, context) : undefined,
        ImageConfig: output.ImageConfig != null ? de_ImageConfig(output.ImageConfig, context) : undefined,
    };
};
const de_InvokeWithResponseStreamCompleteEvent = (output, context) => {
    return {
        ErrorCode: __expectString(output.ErrorCode),
        ErrorDetails: __expectString(output.ErrorDetails),
        LogResult: __expectString(output.LogResult),
    };
};
const de_Layer = (output, context) => {
    return {
        Arn: __expectString(output.Arn),
        CodeSize: __expectLong(output.CodeSize),
        SigningJobArn: __expectString(output.SigningJobArn),
        SigningProfileVersionArn: __expectString(output.SigningProfileVersionArn),
    };
};
const de_LayersList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_LayersListItem(entry, context);
    });
    return retVal;
};
const de_LayersListItem = (output, context) => {
    return {
        LatestMatchingVersion: output.LatestMatchingVersion != null
            ? de_LayerVersionsListItem(output.LatestMatchingVersion, context)
            : undefined,
        LayerArn: __expectString(output.LayerArn),
        LayerName: __expectString(output.LayerName),
    };
};
const de_LayersReferenceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_Layer(entry, context);
    });
    return retVal;
};
const de_LayerVersionContentOutput = (output, context) => {
    return {
        CodeSha256: __expectString(output.CodeSha256),
        CodeSize: __expectLong(output.CodeSize),
        Location: __expectString(output.Location),
        SigningJobArn: __expectString(output.SigningJobArn),
        SigningProfileVersionArn: __expectString(output.SigningProfileVersionArn),
    };
};
const de_LayerVersionsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_LayerVersionsListItem(entry, context);
    });
    return retVal;
};
const de_LayerVersionsListItem = (output, context) => {
    return {
        CompatibleArchitectures: output.CompatibleArchitectures != null
            ? de_CompatibleArchitectures(output.CompatibleArchitectures, context)
            : undefined,
        CompatibleRuntimes: output.CompatibleRuntimes != null ? de_CompatibleRuntimes(output.CompatibleRuntimes, context) : undefined,
        CreatedDate: __expectString(output.CreatedDate),
        Description: __expectString(output.Description),
        LayerVersionArn: __expectString(output.LayerVersionArn),
        LicenseInfo: __expectString(output.LicenseInfo),
        Version: __expectLong(output.Version),
    };
};
const de_OnFailure = (output, context) => {
    return {
        Destination: __expectString(output.Destination),
    };
};
const de_OnSuccess = (output, context) => {
    return {
        Destination: __expectString(output.Destination),
    };
};
const de_ProvisionedConcurrencyConfigList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ProvisionedConcurrencyConfigListItem(entry, context);
    });
    return retVal;
};
const de_ProvisionedConcurrencyConfigListItem = (output, context) => {
    return {
        AllocatedProvisionedConcurrentExecutions: __expectInt32(output.AllocatedProvisionedConcurrentExecutions),
        AvailableProvisionedConcurrentExecutions: __expectInt32(output.AvailableProvisionedConcurrentExecutions),
        FunctionArn: __expectString(output.FunctionArn),
        LastModified: __expectString(output.LastModified),
        RequestedProvisionedConcurrentExecutions: __expectInt32(output.RequestedProvisionedConcurrentExecutions),
        Status: __expectString(output.Status),
        StatusReason: __expectString(output.StatusReason),
    };
};
const de_Queues = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const de_RuntimeVersionConfig = (output, context) => {
    return {
        Error: output.Error != null ? de_RuntimeVersionError(output.Error, context) : undefined,
        RuntimeVersionArn: __expectString(output.RuntimeVersionArn),
    };
};
const de_RuntimeVersionError = (output, context) => {
    return {
        ErrorCode: __expectString(output.ErrorCode),
        Message: __expectString(output.Message),
    };
};
const de_ScalingConfig = (output, context) => {
    return {
        MaximumConcurrency: __expectInt32(output.MaximumConcurrency),
    };
};
const de_SecurityGroupIds = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const de_SelfManagedEventSource = (output, context) => {
    return {
        Endpoints: output.Endpoints != null ? de_Endpoints(output.Endpoints, context) : undefined,
    };
};
const de_SelfManagedKafkaEventSourceConfig = (output, context) => {
    return {
        ConsumerGroupId: __expectString(output.ConsumerGroupId),
    };
};
const de_SigningProfileVersionArns = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const de_SnapStartResponse = (output, context) => {
    return {
        ApplyOn: __expectString(output.ApplyOn),
        OptimizationStatus: __expectString(output.OptimizationStatus),
    };
};
const de_SourceAccessConfiguration = (output, context) => {
    return {
        Type: __expectString(output.Type),
        URI: __expectString(output.URI),
    };
};
const de_SourceAccessConfigurations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_SourceAccessConfiguration(entry, context);
    });
    return retVal;
};
const de_StringList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const de_SubnetIds = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const de_Tags = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = __expectString(value);
        return acc;
    }, {});
};
const de_Topics = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const de_TracingConfigResponse = (output, context) => {
    return {
        Mode: __expectString(output.Mode),
    };
};
const de_VpcConfigResponse = (output, context) => {
    return {
        SecurityGroupIds: output.SecurityGroupIds != null ? de_SecurityGroupIds(output.SecurityGroupIds, context) : undefined,
        SubnetIds: output.SubnetIds != null ? de_SubnetIds(output.SubnetIds, context) : undefined,
        VpcId: __expectString(output.VpcId),
    };
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
