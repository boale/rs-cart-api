/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/// <reference types="node" />
import type { Arguments } from 'yargs';
import type { ReportOptions } from 'istanbul-reports';
import type { ForegroundColor } from 'chalk';
declare type CoverageProvider = 'babel' | 'v8';
declare type Timers = 'real' | 'fake' | 'modern' | 'legacy';
export declare type Path = string;
export declare type Glob = string;
export declare type HasteConfig = {
    computeSha1?: boolean;
    defaultPlatform?: string | null;
    hasteImplModulePath?: string;
    platforms?: Array<string>;
    throwOnModuleCollision?: boolean;
};
export declare type CoverageReporterName = keyof ReportOptions;
export declare type CoverageReporterWithOptions<K = CoverageReporterName> = K extends CoverageReporterName ? ReportOptions[K] extends never ? never : [K, Partial<ReportOptions[K]>] : never;
export declare type CoverageReporters = Array<CoverageReporterName | CoverageReporterWithOptions>;
export declare type ReporterConfig = [string, Record<string, unknown>];
export declare type TransformerConfig = [string, Record<string, unknown>];
export interface ConfigGlobals {
    [K: string]: unknown;
}
export declare type DefaultOptions = {
    automock: boolean;
    bail: number;
    cache: boolean;
    cacheDirectory: Path;
    changedFilesWithAncestor: boolean;
    clearMocks: boolean;
    collectCoverage: boolean;
    coveragePathIgnorePatterns: Array<string>;
    coverageReporters: Array<CoverageReporterName>;
    coverageProvider: CoverageProvider;
    errorOnDeprecated: boolean;
    expand: boolean;
    forceCoverageMatch: Array<Glob>;
    globals: ConfigGlobals;
    haste: HasteConfig;
    injectGlobals: boolean;
    maxConcurrency: number;
    maxWorkers: number | string;
    moduleDirectories: Array<string>;
    moduleFileExtensions: Array<string>;
    moduleNameMapper: Record<string, string | Array<string>>;
    modulePathIgnorePatterns: Array<string>;
    noStackTrace: boolean;
    notify: boolean;
    notifyMode: NotifyMode;
    prettierPath: string;
    resetMocks: boolean;
    resetModules: boolean;
    restoreMocks: boolean;
    roots: Array<Path>;
    runTestsByPath: boolean;
    runner: 'jest-runner';
    setupFiles: Array<Path>;
    setupFilesAfterEnv: Array<Path>;
    skipFilter: boolean;
    slowTestThreshold: number;
    snapshotSerializers: Array<Path>;
    testEnvironment: string;
    testEnvironmentOptions: Record<string, unknown>;
    testFailureExitCode: string | number;
    testLocationInResults: boolean;
    testMatch: Array<Glob>;
    testPathIgnorePatterns: Array<string>;
    testRegex: Array<string>;
    testRunner: string;
    testSequencer: string;
    testURL: string;
    timers: Timers;
    transformIgnorePatterns: Array<Glob>;
    useStderr: boolean;
    watch: boolean;
    watchPathIgnorePatterns: Array<string>;
    watchman: boolean;
};
export declare type DisplayName = {
    name: string;
    color: typeof ForegroundColor;
};
export declare type InitialOptionsWithRootDir = InitialOptions & Required<Pick<InitialOptions, 'rootDir'>>;
export declare type InitialOptions = Partial<{
    automock: boolean;
    bail: boolean | number;
    cache: boolean;
    cacheDirectory: Path;
    clearMocks: boolean;
    changedFilesWithAncestor: boolean;
    changedSince: string;
    collectCoverage: boolean;
    collectCoverageFrom: Array<Glob>;
    collectCoverageOnlyFrom: {
        [key: string]: boolean;
    };
    coverageDirectory: string;
    coveragePathIgnorePatterns: Array<string>;
    coverageProvider: CoverageProvider;
    coverageReporters: CoverageReporters;
    coverageThreshold: {
        global: {
            [key: string]: number;
        };
    };
    dependencyExtractor: string;
    detectLeaks: boolean;
    detectOpenHandles: boolean;
    displayName: string | DisplayName;
    expand: boolean;
    extraGlobals: Array<string>;
    filter: Path;
    findRelatedTests: boolean;
    forceCoverageMatch: Array<Glob>;
    forceExit: boolean;
    json: boolean;
    globals: ConfigGlobals;
    globalSetup: string | null | undefined;
    globalTeardown: string | null | undefined;
    haste: HasteConfig;
    injectGlobals: boolean;
    reporters: Array<string | ReporterConfig>;
    lo