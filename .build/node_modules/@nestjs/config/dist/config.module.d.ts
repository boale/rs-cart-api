import { DynamicModule } from '@nestjs/common';
import { FactoryProvider } from '@nestjs/common/interfaces';
import { ConfigService } from './config.service';
import { ConfigFactory, ConfigModuleOptions } from './interfaces';
export declare class ConfigModule {
    static forRoot(options?: ConfigModuleOptions): DynamicModule;
    static forFeature(config: ConfigFactory): {
        module: typeof ConfigModule;
        providers: (FactoryProvider<any> | {
            provide: typeof ConfigService;
            useFactory: (configService: ConfigService<Record<string, any>>) => ConfigService<Record<string, any>>;
            inject: (string | symbol | Function)[];
        })[];
        exports: (string | symbol | Function)[];
    };
    private static loadEnvFile;
    private static assignVariablesToProcess;
    private static mergePartial;
    private static getSchemaValidationOptions;
}
